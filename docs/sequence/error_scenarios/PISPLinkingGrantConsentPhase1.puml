@startuml

title PISP Linking Error Scenarios Grant Consent Phase - 1

participant "PISP Backend" as PISP
box "PISP tp-scheme-adapter"
  participant "outbound-server" as PISP_TP_OUT
  participant "PISPLinkingModel" as PISP_LM
  participant "inbound-server" as PISP_TP_IN
end box
box "Mojaloop"
    participant Switch
    participant "Auth Service" as AUTH
    participant "Account Lookup Service" as ALS
end box
box "DFSP tp-scheme-adapter"
  participant "inbound-server" as DFSP_TP_IN
  participant "DFSPLinkingModel" as DFSP_LM
end box
participant DFSPAuthorizeSimulator

== Authentication+Grant Consent ==
autonumber 1 "<b>AUTHENTICATION-#</b>"
rnote right of PISP
PISP has obtained authToken from end-user(OTP) or through a callback(Web).
end note
PISP -> PISP_TP_OUT: POST /linking/request-consent/6789/authenticate
rnote right of PISP #LightBlue
POST /linking/request-consent/6789/authenticate
{
  authToken: '123456'
}
end note

activate PISP
activate PISP_TP_OUT

PISP_TP_OUT -> PISP_TP_OUT: const model = await loadFromKVS({key: 6789})
rnote right of PISP_TP_OUT: state: webAuthenticationChannelResponseReceived or OTPAuthenticationChannelResponseReceived
PISP_TP_OUT -> PISP_LM: model.authenticate()

activate PISP_LM

PISP_LM -> PISP_LM: ThirdpartyRequests.patchConsentRequests()
PISP_LM -> Switch: PATCH /consentRequests/6789
rnote right of PISP_LM #LightBlue
PATCH /consentRequests/6789
FSIOP-Source: pispa
FSIOP-Destination: dfspa
{
  authToken: '124356'
}
end note

activate Switch
Switch --> PISP_LM: 202 Accepted
deactivate PISP_LM
Switch -> DFSP_TP_IN: PATCH /consentRequests/6789
activate DFSP_TP_IN
DFSP_TP_IN --> Switch: 202 Accepted
deactivate Switch
DFSP_TP_IN -> DFSP_TP_IN: const model = await loadFromKVS({key: 6789})
rnote right of DFSP_TP_IN: state: consentRequestValidatedAndStored
DFSP_TP_IN -> DFSP_LM: model.validateAuthToken()
deactivate DFSP_TP_IN
activate DFSP_LM

DFSP_LM -> DFSP_LM: DFSPBackendRequests.validateAuthToken()
rnote right of DFSP_LM #LightBlue
Do we need two backend endpoints for validating
web authTokens and OTP authTokens? Or is a DFSP expected to
validate both cases with one endpoint?

POST /validateAuthToken
{
  consentRequestId: '6789'
  authChannel: model.data.authChannel,
  authToken: '124356'
}
end note
rnote right of DFSP_LM: state: authTokenValidated

DFSP_LM -> DFSP_LM: const consentId = uuid()
DFSP_LM -> DFSP_LM: model.grantConsent()
DFSP_LM -> DFSP_LM: ThirdpartyRequests.postConsents()
rnote right of DFSP_LM: state: consentGranted
rnote right of DFSP_LM #LightBlue
It's important to save the model with the consentId from this point onwards!
Requests will not contain a consentRequestId in the upcoming requests.
This may require changing `PersistentModel` to have a secondary key it can
store the model with.
end note
DFSP_LM -> DFSP_LM: this.saveToKVS({key: '1a2b3c4d'})

DFSP_LM -> Switch: POST /consents
activate Switch

rnote left of DFSP_LM #LightBlue
POST /consents
FSIOP-Source: dfspa
FSIOP-Destination: pispa
{
  consentId: 1a2b3c4d
  consentRequestId: 6789
  scopes: model.data.scopes
}
end note
Switch --> DFSP_LM: 202 ACCEPTED
deactivate DFSP_LM
Switch ->  PISP_TP_IN: POST /consents
activate PISP_TP_IN
PISP_TP_IN -> PISP_TP_IN: const model = await loadFromKVS({key: 6789})
PISP_TP_IN -> PISP_LM: model.consentReceivedAwaitCredential()
activate PISP_LM
PISP_LM --> PISP_LM: const challenge = deriveChallenge(consentRequest)
PISP_TP_IN --> Switch: 202 Accepted
deactivate PISP_TP_IN
deactivate Switch
rnote right of PISP_LM: state: consentReceivedAwaitingCredential
PISP_LM -> PISP_TP_OUT: return Model state and challenge
deactivate PISP_LM
PISP_TP_OUT -> PISP: 200 OK Model State and challenge
rnote left of PISP_TP_OUT #LightBlue
{
  currentState: "consentReceivedAwaitingCredential"
  challenge: challenge
}
end note

rnote right of PISP
PISP has obtained credential from the end-user
end note
PISP -> PISP_TP_OUT: POST /linking/request-consent/6789/authenticate
rnote right of PISP #LightBlue
POST /linking/request-consent/6789/pass-credential
{
  credential: {
    payload: PublicKeyCredential
  }
}
end note
PISP_TP_OUT -> PISP_TP_OUT: const model = await loadFromKVS({key: 6789})
PISP_TP_OUT -> PISP_LM: model.registerCredential()
activate PISP_LM

PISP_LM -> PISP_LM: ThirdpartyRequests.putConsents()
rnote right of PISP_LM: state: signedConsentSent
rnote right of PISP_LM #LightBlue
It's important to save the model with the consentId from this point onwards!
Requests will not contain a consentRequestId in the upcoming requests.
This may require changing `PersistentModel` to have a secondary key it can
store the model with.
end note
PISP_LM --> PISP_LM: this.saveToKVS({key: '1a2b3c4d'})
PISP_LM -> Switch: PUT /consents/1a2b3c4d
activate Switch

rnote right of PISP_LM #LightBlue
PUT /consents/1a2b3c4d
FSIOP-Source: pispa
FSIOP-Destination: dfspa
{
  scopes: [{
    address: 'dfspa.username.1234',
    actions: ['ACCOUNTS_GET_BALANCE', 'ACCOUNTS_TRANSFER'],
    address: 'dfspa.username.5678',
    actions: ['ACCOUNTS_GET_BALANCE', 'ACCOUNTS_TRANSFER'],
  }],
  credential: {
    credentialType: "FIDO",
    status: "PENDING",
    payload: PublicKeyCredential
  }
}
end note

Switch --> PISP_LM: 202 Accepted
deactivate PISP_LM
Switch -> DFSP_TP_IN: PUT /consents/1a2b3c4d
activate DFSP_TP_IN

DFSP_TP_IN -> DFSP_TP_IN: const model = await loadFromKVS({key: 1a2b3c4d})
rnote right of DFSP_TP_IN: state: signedConsentReceived
DFSP_TP_IN -> DFSP_LM: model.validateSignedConsent()
activate DFSP_LM
rnote right of DFSP_TP_IN: state: pendingRegistrationAndValidation
DFSP_TP_IN --> Switch: 202 Accepted
deactivate Switch
deactivate DFSP_TP_IN
DFSP_LM -> DFSP_LM: Check signed consent.
rnote right of DFSP_LM #LightBlue
Does this need a backend request or can the SDK check the consent.

Yes and No. We're keeping it as this for now (default to just talking to the
auth service), but ideally we would open up a config option that would allow a
DFSP to specify whether or not the DFSP Backend should receive a callback
asking them to validate the credential before proceeding.
end note

rnote right of DFSP_LM: Something went wrong in checking the consent.
rnote right of DFSP_LM: state: errored
DFSP_LM -> Switch: PUT /consents/1a2b3c4d/error
activate Switch

rnote left of DFSP_LM #LightCoral
PUT /consents/1a2b3c4d/error
FSIOP-Source: dfspa
FSIOP-Destination: pispa
{
  errorInformation: {
    errorCode: '7200',
    errorDescription: 'Generic Thirdparty account linking error'
  } OR
  errorInformation: {
    errorCode: '7212',
    errorDescription: 'Signed challenge does not match derived challenge'
  }
}
end note
Switch --> DFSP_LM: 200 OK
deactivate DFSP_LM
Switch ->  PISP_TP_IN: PUT /consents/1a2b3c4d/error
activate PISP_TP_IN
PISP_TP_IN --> Switch: 200 OK
deactivate Switch
PISP_TP_IN --> PISP_LM: MojaloopFSPIOPError response received
deactivate PISP_TP_IN
activate PISP_LM
rnote right of PISP_LM: state: errored
PISP_LM -> PISP_TP_OUT: return MojaloopFSPIOPError
deactivate PISP_LM
PISP_TP_OUT --> PISP: 400 Bad Request ErrorInformationObject
deactivate PISP_TP_OUT
deactivate PISP
@enduml
