@startuml

title PISP Transaction


participant "PISP Backend" as PISP
box "PISP tp-scheme-adapter"
  participant "outbound-server" as PISP_TP_OUT
  participant "PISPTransactionModel" as PISP_TM
  participant "inbound-server" as PISP_TP_IN
end box
box "PISP sdk-scheme-adapter"
  participant "outbound-server" as PISP_SDK_OUT
  participant "inbound-server" as PISP_SDK_IN
end box
box "Mojaloop"
    participant Switch
    participant AuthService
end box
box "DFSP sdk-scheme-adapter"
  participant "inbound-server" as DFSP_SDK_IN
  participant "outbound-server" as DFSP_SDK_OUT
end box
box "DFSP tp-scheme-adapter"
  participant "inbound-server" as DFSP_TP_IN
  participant "DFSPTransactionModel" as DFSP_TM
  participant "outbound-server" as DFSP_TP_OUT
end box


== Party Lookup ==
autonumber 1 "<b>LOOK-#</b>"
rnote right of PISP #LightBlue
POST /thirdpartyTransaction/partyLookup
{
  transactionRequestId: "b51ec534-ee48-4575-b6a9-ead2955b8069",
  payee: {
    partyIdType: "MSISDN",
    partyIdentifier: "+123456789"
  }
}
end note
PISP -> PISP_TP_OUT: POST /thirdpartyTransaction/partyLookup
activate PISP
activate PISP_TP_OUT
' TODO: line up with state-models.md doc
PISP_TP_OUT -> PISP_TM: partyLookup()
rnote right of PISP_TM: state: requestPartyLookup
activate PISP_TM
PISP_TM -> PISP_TM: SDKRequests.requestPartiesInformation
PISP_TM -> PISP_SDK_OUT: SYNC GET /parties/{type}/{id}
activate PISP_SDK_OUT
PISP_SDK_OUT -> PISP_SDK_OUT: retrieve PartiesInformation from Switch
PISP_SDK_OUT -> PISP_TM: 200 PartyInformation
deactivate PISP_SDK_OUT
rnote right of PISP_TM: state: payeeResolved

PISP_TM -> PISP_TP_OUT: partyInformation
deactivate PISP_TM

' TODO: party lookup details
PISP_TP_OUT --> PISP: 200 OK PartyInformation
deactivate PISP_TP_OUT
deactivate PISP

...User checks the party name, and confirms transaction to continue...



== Initate Transaction ==
autonumber 1 "<b>INIT-#</b>"
rnote right of PISP #LightBlue
POST /thirdpartyTransactions/{transactionRequestId}/initiate
{
  amount: {
    amount: "20.00",
    currency: "USD"
  },
  "amountType": "SEND",
  "payee": {....},
  "payer": {
    "partyIdType": "THIRD_PARTY_LINK",
    "partyIdentifier": "qwerty-56789",
    "fspId": "dfspa"
  },
  "transactionType": {
    "scenario": "TRANSFER",
    "initiator": 'PAYER",
    "initiatorType": "CONSUMER"
  },
  expiration: "2021-03-08T08:08:08.699-04:00"
}
end note
PISP -> PISP_TP_OUT: POST /thirdpartyTransactions/{transactionRequestId}/initiate
activate PISP
activate PISP_TP_OUT

PISP_TP_OUT -> PISP_TM: initiate()
activate PISP_TM
rnote right of PISP_TM: state: requestThirdpartyTransaction
PISP_TM -> PISP_TM: SDKRequests.requestThirdpartyTransaction()
PISP_TM -> Switch: POST /thirdpartyRequests/transactions
activate Switch
Switch --> PISP_TM: 202 Accepted
deactivate PISP_TM
rnote right of PISP_TM: state: pendingTransactionInitiation

note over DFSP_TP_IN
  DFSP handles PISP transaction request
end note
Switch -> DFSP_TP_IN: POST /thirdpartyRequests/transactions
activate DFSP_TP_IN
DFSP_TP_IN --> Switch: 202 Accepted
deactivate Switch
note over DFSP_TM
  DFSP starts workflow for DFSPTransactionModel
end note
DFSP_TP_IN -> DFSP_TM: transactionRequestReceived()
deactivate DFSP_TP_IN
activate DFSP_TM
rnote right of DFSP_TM: state: transactionRequestReceived\n**transactionRequestState** is **RECEIVED**
DFSP_TM -> DFSP_TM: persist transactionRequestState for transactionRequestId
note over DFSP_TM
  DFSP asks its backend to verify consent for payer via THIRD_PARTY_LINK
end note
DFSP_TM -> DFSP_TM: DFSPBackendRequests.validateThirdpartyTransactionRequestAndGetContext(transactionRequest)
note over DFSP_TM
  DFSP is happy with Consent
end note
rnote right of DFSP_TM: state: consentIsValid
DFSP_TM -> DFSP_TM: so generate **transactionId**: '1234-1234-1234-1234'
note over DFSP_TM
  DFSP informs PISP that **transactionId** has been allocated
end note
DFSP_TM -> DFSP_TM: SDKRequests.notifyThirdpartyAboutTransactionRequestState(transactionId, transactionRequestState)
rnote right of DFSP_TM: state: pendingNotifyThirdpartyAboutTransactionRequestState
rnote right of DFSP_TM #LightBlue
PUT /thirdpartyRequests/transaction/{transactionRequestId}
{
  transactionId: '1234-1234-1234-1234',
  transactionRequestState: 'RECEIVED'
}
end note
DFSP_TM -> Switch: PUT /thirdpartyRequests/transaction/{transactionRequestId}
activate Switch
Switch --> DFSP_TM: 202 Accepted
Switch -> PISP_TP_IN: PUT /thirdpartyRequests/transaction/{transactionRequestId}
activate PISP_TP_IN
PISP_TP_IN --> Switch: 202 accepted
deactivate Switch
PISP_TP_IN -> PISP_TM: transactionRequestReceived()
activate PISP_TM
rnote right of PISP_TM: state: transactionRequestReceived
PISP_TM -> PISP_TM: store received **transactionId**
deactivate PISP_TM
deactivate PISP_TP_IN
note over PISP_TM
  There could be a race condition (time based hazard)
  between two incoming calls 
  
  **PUT /thirdpartyReqeusts/transaction/{id}**
  and
  **POST /thirdpartyRequests/authorizations**
  
  so we are mitigating it by alternative two-step transitions:

  pendingTransactionInitiation (START): 
    -> (CASE-1) transactionRequestReceived -> authorizationRequestReceived
    -> (CASE-2) authorizationRequestReceived -> transactionRequestReceived
  -> transactionInitiationSuccess (END)

  CASE-1 is visualised here
end note

note over DFSP_TM
  DFSP requires QuoteInformation
end note
DFSP_TM -> DFSP_TM: SDKRequests.requestQuote()
rnote right of DFSP_TM: state: pendingRequestQuote
DFSP_TM -> DFSP_SDK_OUT: SYNC POST /quotes
activate DFSP_SDK_OUT
DFSP_SDK_OUT -> DFSP_SDK_OUT: retrieve QuoteInformation from Switch
DFSP_SDK_OUT -> DFSP_TM: 200 QuoteInformation
deactivate DFSP_SDK_OUT
note over DFSP_TM
  DFSP has the QuoteInformation, they can now ask the PISP for authorization
end note
DFSP_TM -> DFSP_TM: SDKRequests.requestAuthorization()
rnote right of DFSP_TM: state: pendingRequestAuthorization\n**transactionRequestState** is **PENDING**
DFSP_TM -> DFSP_TM: persist transactionRequestState for transactionRequestId
DFSP_TM -> Switch: POST /thirdpartyRequests/authorizations
activate Switch
note over DFSP_TM
  From now DFSPTransactionModel is blocked
  on synchronous call to POST /thirdpartyRequests/authorizations
  until PISP initiate **Approve Transaction** phase.
  Here timeout scenario should be handled properly
end note
Switch --> DFSP_TM: 202 Accepted
activate -> activate: waiting on PUT /thirdpartyRequests/authorizations/{authorizationRequestId}
deactivate activate
Switch -> PISP_TP_IN: POST /thirdpartyRequests/authorizations
activate PISP_TP_IN
PISP_TP_IN --> Switch: 200 OK
deactivate Switch
PISP_TP_IN -> PISP_TM: authorizationRequestReceived()
rnote right of PISP_TM: state: authorizationRequestReceived
activate PISP_TM

rnote right of PISP_TM: state: transactionInitiationSuccess

deactivate PISP_TP_IN


PISP_TM -> PISP_TP_OUT: QuoteInformation, transactionId
deactivate PISP_TM
deactivate PISP_TP_IN

PISP_TP_OUT --> PISP: 200 OK
deactivate PISP_TP_OUT
deactivate PISP

...Present quote to be approved\nUser signs the challenge...


== Approve Transaction ==
autonumber 1 "<b>APPR-#</b>"
rnote right of PISP #LightBlue
rnote right of PISP #Light
POST /thirdpartyTransactions/{transactionRequestId}/approve
{
  signedChallenge: "base64(xxx)"
}
end note
PISP -> PISP_TP_OUT: POST /thirdpartyTransactions/{transactionRequestId}/approve
activate PISP
activate PISP_TP_OUT

PISP_TP_OUT -> PISP_TM: approve()
activate PISP_TM
rnote right of PISP_TM: state: approvalReceived
PISP_TM -> PISP_TM: SDKRequests.requestVerifyAuthorization(authorizationRequestId, signedChallenge)

PISP_TM -> Switch: PUT /thirdpartyRequests/authorizations/{authorizationRequestId}
activate Switch
Switch --> PISP_TM: 202 Accepted
rnote right of PISP_TM: state: pendingVerifyAuthorization
deactivate PISP_TM
Switch -> DFSP_TP_IN: PUT /thirdpartyRequests/authorizations/{authorizationRequestId}
activate DFSP_TP_IN
DFSP_TP_IN --> Switch: 202 Accepted
deactivate Switch
DFSP_TP_IN -> DFSP_TM: 200: AuthorizationInformation
note over DFSP_TM
  From now DFSPTransactionModel is unblocked
end note
note over DFSP_TM
  TransactionModel checks the received AuthorizationInformation with the auth-service.
end note
rnote right of DFSP_TM: state: pendingVerifyAuthorization
DFSP_TM -> DFSP_TM: generate verificationRequestId

DFSP_TM -> DFSP_TM: ThirdpartyRequests.verifyAuthorization(AuthorizationInformation)

DFSP_TM -> Switch: POST /thirdpartyRequests/verifications
activate Switch
Switch --> DFSP_TM: 202 Accepted

Switch -> AuthService: POST /thirdpartyRequests/verifications
activate AuthService
AuthService --> Switch: 202 Accepted
deactivate Switch

AuthService -> AuthService: Lookup Consent for payload.consentId
AuthService -> AuthService: Verify verification

note over PISP, DFSP_TM
  ERROR_SCENARIO: Challenge was signed by wrong private key, AuthService rejects the Verification request
end note

AuthService -> Switch: PUT /thirdpartyRequests/verifications/{verificationRequestId}/error
activate Switch
Switch --> AuthService: 200 OK
Switch -> DFSP_TP_IN: PUT /thirdpartyRequests/verifications/{verificationRequestId}/error
DFSP_TP_IN --> Switch: 200 OK
deactivate Switch

DFSP_TP_IN -> DFSP_TM: VerificationResponseInformation

rnote right of DFSP_TM: DFSP is unhappy with Authorization\n**transactionRequestState** is **REJECTED**
rnote right of DFSP_TM: state: failureVerifyAuthorization
DFSP_TM -> DFSP_TM: persist transactionRequestState for transactionRequestId
DFSP_TM -> DFSP_TM: SDKRequests.notifyThirdpartyAboutRejectedAuthorization(transactionRequestId)
DFSP_TM -> Switch: PUT /thirdpartyRequests/transaction/{transactionRequestId}/error
activate Switch
Switch -> DFSP_TM: 202 Accept
note over DFSP_TM
  ERROR_SCENARIO: **DFSPTransactionModel ends its workflow here**
end note
Swich -> PISP_TP_IN: PUT /thirdpartyRequests/transaction/{transactionRequestId}/error
activate PISP_TP_IN
PISP_TP_IN -> Switch: 202 Accept
deactivate Switch

note over PISP_TM
  ERROR_SCENARIO: **PISPTransactionModel will end its workflow here**
end note
PISP_TP_IN -> PISP_TM: authorizationRejected()
deactivate PISP_TP_IN
activate PISP_TM
rnote right of PISP_TM: state: rejectedAuthorization
PISP_TM -> PISP_TP_OUT: not approved: authorization is rejected
deactivate PISP_TM
PISP_TP_OUT -> PISP: 500: authorization is rejected



note over PISP, DFSP_TM
  HAPPY_SCENARIO: **DFSPTransactionModel continues workflow**
end note

AuthService -> AuthService: Authorization is valid, challenge signed with correct private key

AuthService -> Switch: PUT /thirdpartyRequests/verifications/{verificationRequestId}
activate Switch
Switch --> AuthService: 200 OK
Switch -> DFSP_TP_IN: PUT /thirdpartyRequests/verifications/{verificationRequestId}
DFSP_TP_IN --> Switch: 200 OK
deactivate Switch

DFSP_TP_IN -> DFSP_TM: VerificationResponseInformation


rnote right of DFSP_TM: The Auth Service is happy with Authorization\n**transactionRequestState** is **ACCEPTED**
DFSP_TM -> DFSP_TM: persist transactionRequestState for transactionRequestId

note over DFSP_TM
  DFSP is happy, so initiates the Transfer for transferId
end note
DFSP_TM -> DFSP_TM: generate **transferId**
DFSP_TM -> DFSP_TM: transfer(transferId)
rnote right of DFSP_TM: state: pendingTransfer
DFSP_TM -> DFSP_TM: SDKRequests.requestTransfer(transferId, transferPayload)
DFSP_TM -> DFSP_SDK_OUT: SYNC POST /simpleTransfer
activate DFSP_SDK_OUT
DFSP_SDK_OUT -> DFSP_SDK_OUT: request Switch to realize simple transfer
DFSP_SDK_OUT -> DFSP_TM: 202: Transfer done
deactivate DFSP_SDK_OUT
note over DFSP_TM
  DFSP notifies PISP that Transfer is done
end note
DFSP_TM -> DFSP_TM: SDKRequests.notifyThirdpartyAboutTransfer(transferId)
rnote right of DFSP_TM: state: pendingNotifyThirdpartyAboutTransfer

DFSP_TM -> Switch: PATCH /thirdpartyRequests/transactions/{transactionRequestId}
activate Switch
Switch --> DFSP_TM: 202 Accepted
rnote right of DFSP_TM: state: transactionRequestSuccess
deactivate DFSP_TM


note over PISP_TM
  HAPPY_SCENARIO: **PISPTransactionModel continues workflow**
end note

Switch -> PISP_TP_IN: PATCH /thirdpartyRequests/transactions/{transactionRequestId}
activate PISP_TP_IN
PISP_TP_IN --> Switch: 200 OK
deactivate Switch

PISP_TP_IN -> PISP_TM: transactionSuccess(transactionRequestId)
deactivate PISP_TP_IN
activate PISP_TM
rnote right of PISP_TM: state: transactionSuccess


PISP_TM -> PISP_TP_OUT: Transaction & Transfer are done
deactivate PISP_TM

PISP_TP_OUT --> PISP: 200 OK
deactivate PISP_TP_OUT
deactivate PISP

@enduml
