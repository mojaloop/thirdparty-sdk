/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/accounts/{ID}": {
    /** The HTTP request `GET /accounts/{ID}` is used to retrieve the list of potential accounts available for linking. */
    get: operations["GetAccountsByUserId"];
    /** The HTTP request `PUT /accounts/{ID}` is used to return the list of potential accounts available for linking */
    put: operations["UpdateAccountsByUserId"];
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/accounts/{ID}/error": {
    /** The HTTP request `PUT /accounts/{ID}/error` is used to return error information */
    put: operations["UpdateAccountsByUserIdError"];
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/authorizations": {
    /** The HTTP request `POST /authorizations` is used to request the Payer to enter the applicable credentials in the PISP system. */
    post: operations["AuthorizationsPostRequest"];
  };
  "/authorizations/{ID}": {
    /**
     * The callback PUT /authorizations/ is used to inform the client of the
     * result of a previously-requested authorization. The ID in the URI should
     * contain the one that was used in the POST /authorizations/ requestBody.transactionRequestId @ OUTBOUND
     */
    put: operations["InboundAuthorizationsIDPutResponse"];
  };
  "/consentRequests": {
    /** A request from a PISP to a DFSP to start the process of delegating consent */
    post: operations["CreateConsentRequest"];
    parameters: {
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/consentRequests/{ID}": {
    /**
     * DFSP updates auth channels and/or auth uri in response to consentRequest.
     *
     * PISP updates the consentRequest to include authorization token from their user,
     * which the DFSP is to then verify.
     */
    put: operations["UpdateConsentRequest"];
    /** PISP sends user's OTP token to a DFSP to verify user trusts aforementioned PISP */
    patch: operations["PatchConsentRequest"];
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/consentRequests/{ID}/error": {
    /** DFSP responds to the PISP if something went wrong with validating an OTP or secret. */
    put: operations["NotifyErrorConsentRequests"];
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/consents": {
    /** DFSP sends this request to the PISP after granting consent. DFSP sends this request to an Auth service to validate a signed consent. */
    post: operations["PostConsents"];
    parameters: {
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/consents/{ID}": {
    /** The HTTP request `GET /consents/{ID}` is used to get information regarding a consent object created or requested earlier. The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`. summary: GetConsent */
    get: operations["GetConsent"];
    /**
     * The HTTP request `PUT /consents/{ID}` is used by the PISP and Auth Service.
     *
     * - Called by a `PISP` to after signing a challenge. Sent to an DFSP for verification.
     * - Called by a `auth-service` to notify a DFSP that a credential has been verified and registered.
     */
    put: operations["PutConsentByID"];
    /**
     * The HTTP request `DELETE /consents/{ID}` is used to mark as deleted a previously created consent.
     *
     * - Called by a PISP when a user wants to remove their consent.
     */
    delete: operations["DeleteConsentByID"];
    /**
     * The HTTP request `PATCH /consents/{ID}` is used
     *
     * - In account linking in the Credential Registration phase. Used by a DFSP
     *   to notify a PISP a credential has been verified and registered with an
     *   Auth service.
     *
     * - In account unlinking by a hub hosted auth service and by DFSPs
     *   in non-hub hosted scenarios to notify participants of a consent being revoked.
     *
     *   Called by a `auth-service` to notify a PISP and DFSP of consent status in hub hosted scenario.
     *   Called by a `DFSP` to notify a PISP of consent status in non-hub hosted scenario.
     */
    patch: operations["PatchConsentByID"];
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/consents/{ID}/error": {
    /** DFSP responds to the PISP if something went wrong with validating or storing consent. */
    put: operations["NotifyErrorConsents"];
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/health": {
    /** The HTTP request GET /health is used to return the current status of the API. */
    get: operations["HealthGet"];
  };
  "/metrics": {
    /** The HTTP request GET /metrics is used to return metrics for the API. */
    get: operations["MetricsGet"];
  };
  "/participants/{ID}": {
    /** The callback `PUT /participants/{ID}` is used to inform the client of the result of the creation of the provided list of identities. */
    put: operations["PutParticipantsByID"];
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/participants/{ID}/error": {
    /** If there is an error during FSP information creation in the server, the error callback `PUT /participants/{ID}/error` is used. The `{ID}` in the URI should contain the requestId that was used for the creation of the participant information. */
    put: operations["PutParticipantsByIDAndError"];
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/participants/{Type}/{ID}": {
    /** The HTTP request `GET /participants/{Type}/{ID}` (or `GET /participants/{Type}/{ID}/{SubId}`) is used to find out in which FSP the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}`, is located (for example, `GET /participants/MSISDN/123456789`, or `GET /participants/BUSINESS/shoecompany/employee1`). This HTTP request should support a query string for filtering of currency. To use filtering of currency, the HTTP request `GET /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency. */
    get: operations["ParticipantsByTypeAndID"];
    /** The callback `PUT /participants/{Type}/{ID}` (or `PUT /participants/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the lookup, creation, or deletion of the FSP information related to the Party. If the FSP information is deleted, the fspId element should be empty; otherwise the element should include the FSP information for the Party. */
    put: operations["ParticipantsByTypeAndID3"];
    /** The HTTP request `POST /participants/{Type}/{ID}` (or `POST /participants/{Type}/{ID}/{SubId}`) is used to create information in the server regarding the provided identity, defined by `{Type}`, `{ID}`, and optionally `{SubId}` (for example, `POST /participants/MSISDN/123456789` or `POST /participants/BUSINESS/shoecompany/employee1`). An ExtensionList element has been added to this reqeust in version v1.1 */
    post: operations["ParticipantsByIDAndType"];
    /**
     * The HTTP request `DELETE /participants/{Type}/{ID}` (or `DELETE /participants/{Type}/{ID}/{SubId}`) is used to delete information in the server regarding the provided identity, defined by `{Type}` and `{ID}`) (for example, `DELETE /participants/MSISDN/123456789`), and optionally `{SubId}`. This HTTP request should support a query string to delete FSP information regarding a specific currency only. To delete a specific currency only, the HTTP request `DELETE /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
     *
     * **Note:** The Account Lookup System should verify that it is the Party’s current FSP that is deleting the FSP information.
     */
    delete: operations["ParticipantsByTypeAndID2"];
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components["parameters"]["Type"];
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/participants/{Type}/{ID}/error": {
    /** If the server is unable to find, create or delete the associated FSP of the provided identity, or another processing error occurred, the error callback `PUT /participants/{Type}/{ID}/error` (or `PUT /participants/{Type}/{ID}/{SubId}/error`) is used. */
    put: operations["ParticipantsErrorByTypeAndID"];
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components["parameters"]["Type"];
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/thirdpartyRequests/transactions": {
    /** The HTTP request POST `/thirdpartyRequests/transactions` is used by a PISP to initiate a 3rd party Transaction request with a DFSP */
    post: operations["CreateThirdpartyTransactionRequests"];
    parameters: {
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/thirdpartyRequests/authorizations": {
    /** The HTTP request `POST /thirdpartyRequests/authorizations` is used to request the Payer to enter the applicable credentials in the PISP system. */
    post: operations["PostThirdpartyRequestsAuthorizations"];
    parameters: {
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/thirdpartyRequests/authorizations/{ID}": {
    /**
     * The callback PUT /thirdpartyRequests/authorizations/{ID} is used to inform the client of the
     * result of a previously-requested authorization. The ID in the URI should
     * contain the one that was used in the POST /authorizations/ requestBody.transactionRequestId @ OUTBOUND
     */
    put: operations["PutThirdpartyRequestsAuthorizationsById"];
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/thirdpartyRequests/authorizations/{ID}/error": {
    /**
     * The HTTP request `PUT /thirdpartyRequests/authorizations/{ID}/error` is used by the DFSP or PISP to inform
     * the other party that something went wrong with a Thirdparty Transaction Authorization Request.
     *
     * The PISP may use this to tell the DFSP that the Thirdparty Transaction Authorization Request is invalid or doesn't
     * match a `transactionRequestId`.
     *
     * The DFSP may use this to tell the PISP that the signed challenge returned in `PUT /thirdpartyRequest/authorizations/{ID}`
     * was invalid.
     */
    put: operations["PutThirdpartyRequestsAuthorizationsByIdAndError"];
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/thirdpartyRequests/transactions/{ID}/authorizations": {
    /**
     * The HTTP request `PUT /thirdpartyRequests/transactions/{id}/authorizations` is used by the auth-service to update a thirdparty authorization after successful validation.
     * For an unsuccessful authorization result, the `PUT /thirdpartyRequests/transactions/{id}/authorizations/error` will be called by the auth-service, instead of this endpoint.
     */
    put: operations["UpdateThirdpartyAuthorization"];
    /** The HTTP request `POST /thirdpartyRequests/transactions/{id}/authorizations` is used by the DFSP to verify a third party authorization. */
    post: operations["VerifyThirdPartyAuthorization"];
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/thirdpartyRequests/transactions/{ID}": {
    /**
     * The HTTP request `GET /thirdpartyRequests/transactions/{ID}` is used to request the
     * retrieval of a third party transaction request.
     */
    get: operations["GetThirdpartyTransactionRequests"];
    /**
     * The HTTP request `PUT /thirdpartyRequests/transactions/{ID}` is used by the DFSP to inform the client about
     * the status of a previously requested thirdparty transaction request.
     *
     * Switch(Thirdparty API Adapter) -> PISP
     */
    put: operations["UpdateThirdPartyTransactionRequests"];
    /**
     * The HTTP request `PATCH /thirdpartyRequests/transactions/{ID}` is used to
     * notify a thirdparty of the outcome of a transaction request.
     *
     * Switch(Thirdparty API Adapter) -> PISP
     */
    patch: operations["NotifyThirdpartyTransactionRequests"];
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/thirdpartyRequests/transactions/{ID}/error": {
    /**
     * If the server is unable to find the transaction request, or another processing error occurs,
     * the error callback `PUT /thirdpartyRequests/transactions/{ID}/error` is used.
     * The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of
     * the thirdparty transaction request.
     */
    put: operations["ThirdpartyTransactionRequestsError"];
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/services/{ServiceType}": {
    /**
     * The HTTP request `GET /services/{ServiceType}` is used to retrieve the list of participants
     * that support a specified service.
     */
    get: operations["GetServicesByServiceType"];
    /**
     * The HTTP request `PUT /services/{ServiceType}` is used to return list of participants
     * that support a specified service.
     */
    put: operations["PutServicesByServiceType"];
    parameters: {
      path: {
        /** The type of the service identifier. For example, `THIRD_PARTY_DFSP` */
        ServiceType: components["parameters"]["ServiceType"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
  "/services/{ServiceType}/error": {
    /** The HTTP request `PUT /services/{ServiceType}/error` is used to return error information */
    put: operations["PutServicesByServiceTypeAndError"];
    parameters: {
      path: {
        /** The type of the service identifier. For example, `THIRD_PARTY_DFSP` */
        ServiceType: components["parameters"]["ServiceType"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
  };
}

export interface components {
  schemas: {
    /** The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error. */
    ErrorCode: string;
    /** Error description string. */
    ErrorDescription: string;
    /** Extension key. */
    ExtensionKey: string;
    /** Extension value. */
    ExtensionValue: string;
    /** Data model for the complex type Extension. */
    Extension: {
      key: components["schemas"]["ExtensionKey"];
      value: components["schemas"]["ExtensionValue"];
    };
    /** Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment. */
    ExtensionList: {
      /** Number of Extension elements. */
      extension: components["schemas"]["Extension"][];
    };
    /** Data model for the complex type ErrorInformation. */
    ErrorInformation: {
      errorCode: components["schemas"]["ErrorCode"];
      errorDescription: components["schemas"]["ErrorDescription"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /** Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses. */
    ErrorInformationResponse: {
      errorInformation?: components["schemas"]["ErrorInformation"];
    };
    /**
     * The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
     *
     * Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
     *
     * **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
     */
    Name: string;
    /**
     * A long-lived unique account identifier provided by the DFSP. This MUST NOT
     * be Bank Account Number or anything that may expose a User's private bank
     * account information.
     */
    AccountId: string;
    /** The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies. */
    Currency:
      | "AED"
      | "AFN"
      | "ALL"
      | "AMD"
      | "ANG"
      | "AOA"
      | "ARS"
      | "AUD"
      | "AWG"
      | "AZN"
      | "BAM"
      | "BBD"
      | "BDT"
      | "BGN"
      | "BHD"
      | "BIF"
      | "BMD"
      | "BND"
      | "BOB"
      | "BRL"
      | "BSD"
      | "BTN"
      | "BWP"
      | "BYN"
      | "BZD"
      | "CAD"
      | "CDF"
      | "CHF"
      | "CLP"
      | "CNY"
      | "COP"
      | "CRC"
      | "CUC"
      | "CUP"
      | "CVE"
      | "CZK"
      | "DJF"
      | "DKK"
      | "DOP"
      | "DZD"
      | "EGP"
      | "ERN"
      | "ETB"
      | "EUR"
      | "FJD"
      | "FKP"
      | "GBP"
      | "GEL"
      | "GGP"
      | "GHS"
      | "GIP"
      | "GMD"
      | "GNF"
      | "GTQ"
      | "GYD"
      | "HKD"
      | "HNL"
      | "HRK"
      | "HTG"
      | "HUF"
      | "IDR"
      | "ILS"
      | "IMP"
      | "INR"
      | "IQD"
      | "IRR"
      | "ISK"
      | "JEP"
      | "JMD"
      | "JOD"
      | "JPY"
      | "KES"
      | "KGS"
      | "KHR"
      | "KMF"
      | "KPW"
      | "KRW"
      | "KWD"
      | "KYD"
      | "KZT"
      | "LAK"
      | "LBP"
      | "LKR"
      | "LRD"
      | "LSL"
      | "LYD"
      | "MAD"
      | "MDL"
      | "MGA"
      | "MKD"
      | "MMK"
      | "MNT"
      | "MOP"
      | "MRO"
      | "MUR"
      | "MVR"
      | "MWK"
      | "MXN"
      | "MYR"
      | "MZN"
      | "NAD"
      | "NGN"
      | "NIO"
      | "NOK"
      | "NPR"
      | "NZD"
      | "OMR"
      | "PAB"
      | "PEN"
      | "PGK"
      | "PHP"
      | "PKR"
      | "PLN"
      | "PYG"
      | "QAR"
      | "RON"
      | "RSD"
      | "RUB"
      | "RWF"
      | "SAR"
      | "SBD"
      | "SCR"
      | "SDG"
      | "SEK"
      | "SGD"
      | "SHP"
      | "SLL"
      | "SOS"
      | "SPL"
      | "SRD"
      | "STD"
      | "SVC"
      | "SYP"
      | "SZL"
      | "THB"
      | "TJS"
      | "TMT"
      | "TND"
      | "TOP"
      | "TRY"
      | "TTD"
      | "TVD"
      | "TWD"
      | "TZS"
      | "UAH"
      | "UGX"
      | "USD"
      | "UYU"
      | "UZS"
      | "VEF"
      | "VND"
      | "VUV"
      | "WST"
      | "XAF"
      | "XCD"
      | "XDR"
      | "XOF"
      | "XPF"
      | "YER"
      | "ZAR"
      | "ZMW"
      | "ZWD";
    /** Data model for the complex type Account. */
    Account: {
      accountNickname: components["schemas"]["Name"];
      id: components["schemas"]["AccountId"];
      currency: components["schemas"]["Currency"];
    };
    /** The object sent in a `PUT /accounts/{ID}` request. */
    AccountsIDPutResponse: {
      accounts: components["schemas"]["Account"][];
    };
    /** Data model for the complex type object that contains ErrorInformation. */
    ErrorInformationObject: {
      errorInformation: components["schemas"]["ErrorInformation"];
    };
    /**
     * Below are the allowed values for the enumeration AuthenticationType.
     * - OTP - One-time password generated by the Payer FSP.
     * - QRCODE - QR code used as One Time Password.
     * - U2F - U2F is a new addition isolated to Thirdparty stream.
     */
    AuthenticationType: "OTP" | "QRCODE" | "U2F";
    /** The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits. */
    Integer: string;
    /** The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed. */
    Amount: string;
    /** Data model for the complex type Money. */
    Money: {
      currency: components["schemas"]["Currency"];
      amount: components["schemas"]["Amount"];
    };
    /** Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘). */
    CorrelationId: string;
    /** The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC). */
    DateTime: string;
    /** The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. */
    Latitude: string;
    /** The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. */
    Longitude: string;
    /** Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated. */
    GeoCode: {
      latitude: components["schemas"]["Latitude"];
      longitude: components["schemas"]["Longitude"];
    };
    /** Information for recipient (transport layer information). */
    IlpPacket: string;
    /** Condition that must be attached to the transfer by the Payer. */
    IlpCondition: string;
    /** The object sent in the PUT /quotes/{ID} callback. */
    QuotesIDPutResponse: {
      transferAmount: components["schemas"]["Money"];
      payeeReceiveAmount?: components["schemas"]["Money"];
      payeeFspFee?: components["schemas"]["Money"];
      payeeFspCommission?: components["schemas"]["Money"];
      expiration: components["schemas"]["DateTime"];
      geoCode?: components["schemas"]["GeoCode"];
      ilpPacket: components["schemas"]["IlpPacket"];
      condition: components["schemas"]["IlpCondition"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /** POST /authorizations request object. */
    AuthorizationsPostRequest: {
      authenticationType: components["schemas"]["AuthenticationType"];
      retriesLeft: components["schemas"]["Integer"];
      amount: components["schemas"]["Money"];
      transactionId: components["schemas"]["CorrelationId"];
      transactionRequestId: components["schemas"]["CorrelationId"];
      quote: components["schemas"]["QuotesIDPutResponse"];
    };
    /** The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only. Negative numbers are not allowed. One or more leading zeros are allowed. */
    OtpValue: string;
    /** QR code used as a One Time Password. */
    QRCODE: string;
    /** U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key. */
    U2FPIN: string;
    /** U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key. */
    U2FPinValue: {
      /** U2F challenge-response. */
      pinValue: components["schemas"]["U2FPIN"];
      /** Sequential counter used for cloning detection. Present only for U2F authentication. */
      counter: components["schemas"]["Integer"];
    };
    /**
     * An object sent in a `PUT /thirdpartyRequests/authorization/{ID}` request.
     * based mostly on: https://webauthn.guide/#authentication
     * AuthenticatorAssertionResponse
     */
    FIDOPublicKeyCredentialAssertion: {
      /**
       * credential id: identifier of pair of keys, base64 encoded
       * https://w3c.github.io/webauthn/#ref-for-dom-credential-id
       */
      id: string;
      /** raw credential id: identifier of pair of keys, base64 encoded. */
      rawId: string;
      /** AuthenticatorAssertionResponse */
      response: {
        /** Authenticator data object. */
        authenticatorData: string;
        /** JSON string with client data. */
        clientDataJSON: string;
        /** The signature generated by the private key associated with this credential. */
        signature: string;
        /**
         * This field is optionally provided by the authenticator, and
         * represents the user.id that was supplied during registration.
         */
        userHandle?: string;
      };
      /** response type, we need only the type of public-key */
      type: "public-key";
    };
    /** Contains the authentication value. The format depends on the authentication type used in the AuthenticationInfo complex type. */
    AuthenticationValue: Partial<components["schemas"]["OtpValue"]> &
      Partial<components["schemas"]["QRCODE"]> &
      Partial<components["schemas"]["U2FPinValue"]> &
      Partial<components["schemas"]["FIDOPublicKeyCredentialAssertion"]>;
    /** Data model for the complex type AuthenticationInfo. */
    AuthenticationInfo: {
      authentication: components["schemas"]["AuthenticationType"];
      authenticationValue: components["schemas"]["AuthenticationValue"];
    };
    /**
     * Below are the allowed values for the enumeration.
     * - ENTERED - Consumer entered the authentication value.
     * - REJECTED - Consumer rejected the transaction.
     * - RESEND - Consumer requested to resend the authentication value.
     */
    AuthorizationResponse: "ENTERED" | "REJECTED" | "RESEND";
    /** The object sent in the PUT /authorizations/{ID} callback. */
    AuthorizationsIDPutResponse: {
      authenticationInfo?: components["schemas"]["AuthenticationInfo"];
      responseType: components["schemas"]["AuthorizationResponse"];
    };
    /**
     * The scopes requested for a ConsentRequest.
     * - "accounts.getBalance" - Get the balance of a given account.
     * - "accounts.transfer" - Initiate a transfer from an account.
     */
    ConsentScopeType: "accounts.getBalance" | "accounts.transfer";
    /** Scope + Account Identifier mapping for a Consent. */
    Scope: {
      accountId: components["schemas"]["AccountId"];
      actions: components["schemas"]["ConsentScopeType"][];
    };
    /**
     * The auth channel being used for the consentRequest.
     * - "WEB" - The Web auth channel.
     * - "OTP" - The OTP auth channel.
     */
    ConsentRequestChannelType: "WEB" | "OTP";
    /** The object sent in a `POST /consentRequests` request. */
    ConsentRequestsPostRequest: {
      consentRequestId: components["schemas"]["CorrelationId"];
      /** ID used to associate request with GET /accounts request. */
      userId: string;
      scopes: components["schemas"]["Scope"][];
      authChannels: components["schemas"]["ConsentRequestChannelType"][];
      /** The callback uri that the user will be redirected to after completing the WEB auth channel. */
      callbackUri: string;
    };
    /** The web auth channel being used for PUT consentRequest/{ID} request. */
    ConsentRequestChannelTypeWeb: "WEB";
    /**
     * The object sent in a `PUT /consentRequests/{ID}` request.
     *
     * Schema used in the request consent phase of the account linking web flow,
     * the result is the PISP being instructed on a specific URL where this
     * supposed user should be redirected. This URL should be a place where
     * the user can prove their identity (e.g., by logging in).
     */
    ConsentRequestsIDPutResponseWeb: {
      consentRequestId: components["schemas"]["CorrelationId"];
      scopes: components["schemas"]["Scope"][];
      authChannels: components["schemas"]["ConsentRequestChannelTypeWeb"][];
      /** The callback uri that the user will be redirected to after completing the WEB auth channel. */
      callbackUri: string;
      /** The callback uri that the pisp app redirects to for user to complete their login. */
      authUri: string;
    };
    /** The OTP auth channel being used for PUT consentRequest/{ID} request. */
    ConsentRequestChannelTypeOTP: "OTP";
    /**
     * The object sent in a `PUT /consentRequests/{ID}` request.
     *
     * Schema used in the request consent phase of the account linking OTP/SMS flow.
     */
    ConsentRequestsIDPutResponseOTP: {
      consentRequestId: components["schemas"]["CorrelationId"];
      scopes: components["schemas"]["Scope"][];
      authChannels: components["schemas"]["ConsentRequestChannelTypeOTP"][];
      /** The callback uri that the user will be redirected to after completing the WEB auth channel. */
      callbackUri: string;
    };
    /** The object sent in a `PATCH /consentRequests/{ID}` request. */
    ConsentRequestsIDPatchRequest: {
      authToken: string;
    };
    /**
     * The type of the Credential.
     * - "FIDO" - A FIDO public/private keypair
     */
    CredentialType: "FIDO";
    /**
     * An object sent in a `PUT /consents/{ID}` request.
     * Based on https://w3c.github.io/webauthn/#iface-pkcredential
     * and mostly on: https://webauthn.guide/#registration
     * AuthenticatorAttestationResponse
     * https://w3c.github.io/webauthn/#dom-authenticatorattestationresponse-attestationobject
     */
    FIDOPublicKeyCredentialAttestation: {
      /**
       * credential id: identifier of pair of keys, base64 encoded
       * https://w3c.github.io/webauthn/#ref-for-dom-credential-id
       */
      id: string;
      /** raw credential id: identifier of pair of keys, base64 encoded */
      rawId: string;
      /** AuthenticatorAttestationResponse */
      response: {
        /** JSON string with client data */
        clientDataJSON: string;
        /** CBOR.encoded attestation object */
        attestationObject: string;
      };
      /** response type, we need only the type of public-key */
      type: "public-key";
    };
    /**
     * A credential used to allow a user to prove their identity and access
     * to an account with a DFSP.
     *
     * SignedCredential is a special formatting of the credential to allow us to be
     * more explicit about the `status` field - it should only ever be PENDING when
     * updating a credential.
     */
    SignedCredential: {
      credentialType: components["schemas"]["CredentialType"];
      /** The challenge has signed but not yet verified. */
      status: "PENDING";
      payload: components["schemas"]["FIDOPublicKeyCredentialAttestation"];
    };
    /**
     * The object sent in a `POST /consents` request to AUTH-SERVICE by DFSP to store registered consent with PublicKey
     * and whatever needed to perform authorization validation later
     */
    ConsentsPostRequestAUTH: {
      /**
       * Common ID between the PISP and FSP for the Consent object
       * decided by the DFSP who creates the Consent
       * This field is REQUIRED for POST /consent.
       * creation of this Consent.
       */
      consentId: components["schemas"]["CorrelationId"];
      scopes: components["schemas"]["Scope"][];
      credential: components["schemas"]["SignedCredential"];
    };
    /** The object sent in a `POST /consents` request to PISP by DFSP to ask for delivering the credential object. */
    ConsentsPostRequestPISP: {
      /**
       * Common ID between the PISP and FSP for the Consent object
       * decided by the DFSP who creates the Consent
       * This field is REQUIRED for POST /consent.
       */
      consentId: components["schemas"]["CorrelationId"];
      /**
       * The id of the ConsentRequest that was used to initiate the
       * creation of this Consent.
       */
      consentRequestId: components["schemas"]["CorrelationId"];
      scopes: components["schemas"]["Scope"][];
    };
    /**
     * The HTTP request `PUT /consents/{ID}` is used by the PISP to update a Consent with a signed challenge and register a credential.
     * Called by a `PISP` to after signing a challenge. Sent to a DFSP for verification.
     */
    ConsentsIDPutResponseSigned: {
      scopes: components["schemas"]["Scope"][];
      credential: components["schemas"]["SignedCredential"];
    };
    /**
     * A credential used to allow a user to prove their identity and access
     * to an account with a DFSP.
     *
     * VerifiedCredential is a special formatting of the credential to allow us to be
     * more explicit about the `status` field - it should only ever be VERIFIED when
     * updating a credential.
     */
    VerifiedCredential: {
      credentialType: components["schemas"]["CredentialType"];
      /** The Credential is valid, and ready to be used by the PISP. */
      status: "VERIFIED";
      payload: components["schemas"]["FIDOPublicKeyCredentialAttestation"];
    };
    /**
     * The HTTP request `PUT /consents/{ID}` is used by the DFSP or Auth-Service to update a Consent object once it has been Verified.
     * Called by a `auth-service` to notify a DFSP that a credential has been verified and registered.
     */
    ConsentsIDPutResponseVerified: {
      scopes: components["schemas"]["Scope"][];
      credential: components["schemas"]["VerifiedCredential"];
    };
    /**
     * The status of the Consent.
     * - "VERIFIED" - The Consent is valid and verified.
     */
    ConsentStatusTypeVerified: "VERIFIED";
    /**
     * PATCH /consents/{ID} request object.
     *
     * Sent by the DFSP to the PISP when a consent is verified.
     * Used in the "Register Credential" part of the Account linking flow.
     */
    ConsentsIDPatchResponseVerified: {
      credential: {
        status: components["schemas"]["ConsentStatusTypeVerified"];
      };
    };
    /**
     * The status of the Consent.
     * - "REVOKED" - The Consent is no longer valid and has been revoked.
     */
    ConsentStatusTypeRevoked: "REVOKED";
    /**
     * PATCH /consents/{ID} request object.
     *
     * Sent to both the PISP and DFSP when a consent is revoked.
     * Used in the "Unlinking" part of the Account Unlinking flow.
     */
    ConsentsIDPatchResponseRevoked: {
      status: components["schemas"]["ConsentStatusTypeRevoked"];
      revokedAt: components["schemas"]["DateTime"];
    };
    /**
     * This is a variant based on FSPIOP `PartyIdType` specification.
     * Main difference being the CONSENT and THIRD_PARTY_LINK enums.
     *
     * Below are the allowed values for the enumeration.
     * - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
     * Number, that is, the phone number) is used as reference to a participant.
     * The MSISDN identifier should be in international format according to the
     * [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
     * Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
     * international prefix.
     * - EMAIL - An email is used as reference to a
     * participant. The format of the email should be according to the informational
     * [RFC 3696](https://tools.ietf.org/html/rfc3696).
     * - PERSONAL_ID - A personal identifier is used as reference to a participant.
     * Examples of personal identification are passport number, birth certificate
     * number, and national registration number. The identifier number is added in
     * the PartyIdentifier element. The personal identifier type is added in the
     * PartySubIdOrType element.
     * - BUSINESS - A specific Business (for example, an organization or a company)
     * is used as reference to a participant. The BUSINESS identifier can be in any
     * format. To make a transaction connected to a specific username or bill number
     * in a Business, the PartySubIdOrType element should be used.
     * - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
     * specific business or organization is used as reference to a Party.
     * For referencing a specific device under a specific business or organization,
     * use the PartySubIdOrType element.
     * - ACCOUNT_ID - A bank account number or FSP account ID should be used as
     * reference to a participant. The ACCOUNT_ID identifier can be in any format,
     * as formats can greatly differ depending on country and FSP.
     * - IBAN - A bank account number or FSP account ID is used as reference to a
     * participant. The IBAN identifier can consist of up to 34 alphanumeric
     * characters and should be entered without whitespace.
     * - ALIAS An alias is used as reference to a participant. The alias should be
     * created in the FSP as an alternative reference to an account owner.
     * Another example of an alias is a username in the FSP system.
     * The ALIAS identifier can be in any format. It is also possible to use the
     * PartySubIdOrType element for identifying an account under an Alias defined
     * by the PartyIdentifier.
     * - CONSENT - TBD
     * - THIRD_PARTY_LINK - TBD
     */
    PartyIdType:
      | "MSISDN"
      | "EMAIL"
      | "PERSONAL_ID"
      | "BUSINESS"
      | "DEVICE"
      | "ACCOUNT_ID"
      | "IBAN"
      | "ALIAS"
      | "CONSENT"
      | "THIRD_PARTY_LINK";
    /** Identifier of the Party. */
    PartyIdentifier: string;
    /** Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType. */
    PartySubIdOrType: string;
    /** FSP identifier. */
    FspId: string;
    /** Data model for the complex type PartyIdInfo. */
    PartyIdInfo: {
      partyIdType: components["schemas"]["PartyIdType"];
      partyIdentifier: components["schemas"]["PartyIdentifier"];
      partySubIdOrType?: components["schemas"]["PartySubIdOrType"];
      fspId?: components["schemas"]["FspId"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /** Data model for the complex type PartyResult. */
    PartyResult: {
      partyId: components["schemas"]["PartyIdInfo"];
      errorInformation?: components["schemas"]["ErrorInformation"];
    };
    /** The object sent in the PUT /participants/{ID} callback. */
    ParticipantsIDPutResponse: {
      /** List of PartyResult elements that were either created or failed to be created. */
      partyList: components["schemas"]["PartyResult"][];
      currency?: components["schemas"]["Currency"];
    };
    /** The object sent in the PUT /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} callbacks. */
    ParticipantsTypeIDPutResponse: {
      fspId?: components["schemas"]["FspId"];
    };
    /** The object sent in the POST /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} requests. An additional optional ExtensionList element has been added as part of v1.1 changes. */
    ParticipantsTypeIDSubIDPostRequest: {
      fspId: components["schemas"]["FspId"];
      currency?: components["schemas"]["Currency"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /** A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc. */
    MerchantClassificationCode: string;
    /** Name of the Party. Could be a real name or a nickname. */
    PartyName: string;
    /** First name of the Party (Name Type). */
    FirstName: string;
    /** Middle name of the Party (Name Type). */
    MiddleName: string;
    /** Last name of the Party (Name Type). */
    LastName: string;
    /** Data model for the complex type PartyComplexName. */
    PartyComplexName: {
      firstName?: components["schemas"]["FirstName"];
      middleName?: components["schemas"]["MiddleName"];
      lastName?: components["schemas"]["LastName"];
    };
    /** Date of Birth of the Party. */
    DateOfBirth: string;
    /** Data model for the complex type PartyPersonalInfo. */
    PartyPersonalInfo: {
      complexName?: components["schemas"]["PartyComplexName"];
      dateOfBirth?: components["schemas"]["DateOfBirth"];
    };
    /** Data model for the complex type Party. */
    Party: {
      partyIdInfo: components["schemas"]["PartyIdInfo"];
      merchantClassificationCode?: components["schemas"]["MerchantClassificationCode"];
      name?: components["schemas"]["PartyName"];
      personalInfo?: components["schemas"]["PartyPersonalInfo"];
    };
    /**
     * Below are the allowed values for the enumeration AmountType.
     * - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
     * - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
     */
    AmountType: "SEND" | "RECEIVE";
    /**
     * Below are the allowed values for the enumeration.
     * - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
     * - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
     * - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
     * - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
     * - REFUND - Used for performing a refund of transaction.
     */
    TransactionScenario:
      | "DEPOSIT"
      | "WITHDRAWAL"
      | "TRANSFER"
      | "PAYMENT"
      | "REFUND";
    /** Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type). */
    TransactionSubScenario: string;
    /**
     * Below are the allowed values for the enumeration.
     * - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
     * - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
     */
    TransactionInitiator: "PAYER" | "PAYEE";
    /**
     * Below are the allowed values for the enumeration.
     * - CONSUMER - Consumer is the initiator of the transaction.
     * - AGENT - Agent is the initiator of the transaction.
     * - BUSINESS - Business is the initiator of the transaction.
     * - DEVICE - Device is the initiator of the transaction.
     */
    TransactionInitiatorType: "CONSUMER" | "AGENT" | "BUSINESS" | "DEVICE";
    /** Reason for the refund. */
    RefundReason: string;
    /** Data model for the complex type Refund. */
    Refund: {
      originalTransactionId: components["schemas"]["CorrelationId"];
      refundReason?: components["schemas"]["RefundReason"];
    };
    /** (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. */
    BalanceOfPayments: string;
    /** Data model for the complex type TransactionType. */
    TransactionType: {
      scenario: components["schemas"]["TransactionScenario"];
      subScenario?: components["schemas"]["TransactionSubScenario"];
      initiator: components["schemas"]["TransactionInitiator"];
      initiatorType: components["schemas"]["TransactionInitiatorType"];
      refundInfo?: components["schemas"]["Refund"];
      balanceOfPayments?: components["schemas"]["BalanceOfPayments"];
    };
    /** The object sent in the POST /thirdpartyRequests/transactions request. */
    ThirdpartyRequestsTransactionsPostRequest: {
      /** Common ID between the FSPs for the transaction request object. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request. */
      transactionRequestId: components["schemas"]["CorrelationId"];
      /** Information about the Payee in the proposed financial transaction. */
      payee: components["schemas"]["Party"];
      /** Information about the Payer in the proposed financial transaction. */
      payer: components["schemas"]["PartyIdInfo"];
      /** SEND for sendAmount, RECEIVE for receiveAmount. */
      amountType: components["schemas"]["AmountType"];
      /** Requested amount to be transferred from the Payer to Payee. */
      amount: components["schemas"]["Money"];
      /** Type of transaction. */
      transactionType: components["schemas"]["TransactionType"];
      /** Date and time until when the transaction request is valid. It can be set to get a quick failure in case the peer FSP takes too long to respond. */
      expiration: string;
    };
    /** POST /thirdpartyRequests/authorizations request object. */
    ThirdpartyRequestsAuthorizationsPostRequest: {
      authorizationRequestId: components["schemas"]["CorrelationId"];
      transactionRequestId: components["schemas"]["CorrelationId"];
      /** The challenge that the PISP's client is to sign */
      challenge: string;
      /** The amount that will be debited from the sending customer’s  account as a consequence of the transaction. */
      transferAmount: components["schemas"]["Money"];
      /** The amount that will be credited to the receiving customer’s  account as a consequence of the transaction. */
      payeeReceiveAmount: components["schemas"]["Money"];
      /** The amount of fees that the paying customer will be charged as part of the transaction. */
      fees: components["schemas"]["Money"];
      /** Information about the Payer type, id, sub-type/id, FSP Id in the proposed financial transaction. */
      payer: components["schemas"]["PartyIdInfo"];
      /** Information about the Payee in the proposed financial transaction. */
      payee: components["schemas"]["Party"];
      transactionType: components["schemas"]["TransactionType"];
      /** The time by which the transfer must be completed, set by the payee DFSP. */
      expiration: components["schemas"]["DateTime"];
      extensionList?: components["schemas"]["ExtensionList"];
    };
    /** Describes a challenge that has been signed with FIDO Attestation flows */
    SignedPayloadTypeFIDO: "FIDO";
    /** The object sent in the PUT /thirdpartyRequests/authorizations/{ID} callback. */
    ThirdpartyRequestsAuthorizationsIDPutResponseFIDO: {
      signedPayloadType: components["schemas"]["SignedPayloadTypeFIDO"];
      signedPayload: components["schemas"]["FIDOPublicKeyCredentialAssertion"];
    };
    /** Describes a challenge that has been signed with a private key */
    SignedPayloadTypeGeneric: "GENERIC";
    /** The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters. */
    BinaryString: string;
    /** The object sent in the PUT /thirdpartyRequests/authorizations/{ID} callback. */
    ThirdpartyRequestsAuthorizationsIDPutResponseGeneric: {
      signedPayloadType: components["schemas"]["SignedPayloadTypeGeneric"];
      signedPayload?: components["schemas"]["BinaryString"];
    };
    /** The object sent in the PUT /thirdpartyRequests/transactions/{id}/authorizations request. */
    ThirdpartyRequestsTransactionsIDAuthorizationsPutResponse: {
      /** Base64 encoded binary string - the original challenge. */
      challenge: string;
      /** Base64 encoded binary string - the signed challenge. */
      value: components["schemas"]["BinaryString"];
      /** Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which consent allows the PISP to initiate transaction. */
      consentId: components["schemas"]["CorrelationId"];
      /** DFSP specific account identifiers, e.g. `dfspa.alice.1234` */
      sourceAccountId: components["schemas"]["AccountId"];
      /** The status of the authorization. This value must be `VERIFIED` for a PUT request. */
      status: "VERIFIED";
    };
    /** The object sent in the POST /thirdpartyRequests/transactions/{id}/authorizations request. */
    ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest: {
      /** Base64 encoded binary string - the original challenge. */
      challenge: string;
      /** Base64 encoded binary string - the signed challenge */
      value: components["schemas"]["BinaryString"];
      /** Common ID between the PISP and FSP for the Consent object This tells DFSP and auth-service which constent allows the PISP to initiate transaction. */
      consentId: components["schemas"]["CorrelationId"];
      /** DFSP specific account identifiers, e.g. `dfspa.alice.1234` */
      sourceAccountId: components["schemas"]["AccountId"];
      /** The status of the authorization. This MUST be PENDING for a POST request */
      status: "PENDING";
    };
    /**
     * Below are the allowed values for the enumeration.
     * - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
     * - PENDING - Payer FSP has sent the transaction request to the Payer.
     * - ACCEPTED - Payer has approved the transaction.
     * - REJECTED - Payer has rejected the transaction.
     */
    TransactionRequestState: "RECEIVED" | "PENDING" | "ACCEPTED" | "REJECTED";
    /** The object sent in the PUT /thirdPartyRequests/transactions/{ID} request. */
    ThirdpartyRequestsTransactionsIDPutResponse: {
      transactionId: components["schemas"]["CorrelationId"];
      transactionRequestState: components["schemas"]["TransactionRequestState"];
    };
    /**
     * Below are the allowed values for the enumeration.
     * - RECEIVED - Payee FSP has received the transaction from the Payer FSP.
     * - PENDING - Payee FSP has validated the transaction.
     * - COMPLETED - Payee FSP has successfully performed the transaction.
     * - REJECTED - Payee FSP has failed to perform the transaction.
     */
    TransactionState: "RECEIVED" | "PENDING" | "COMPLETED" | "REJECTED";
    /** The object sent in the PATCH /thirdpartyRequests/transactions/{ID} callback. */
    ThirdpartyRequestsTransactionsIDPatchResponse: {
      transactionId: components["schemas"]["CorrelationId"];
      transactionRequestState: components["schemas"]["TransactionRequestState"];
      transactionState: components["schemas"]["TransactionState"];
    };
    /** The object sent in a `PUT /services/{ServiceType}` request. */
    ServicesServiceTypePutResponse: {
      providers: components["schemas"]["FspId"][];
    };
  };
  responses: {
    /** OK */
    200: unknown;
    /** Accepted */
    202: unknown;
    /** Bad Request */
    400: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Unauthorized */
    401: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Forbidden */
    403: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Not Found */
    404: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Method Not Allowed */
    405: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Not Acceptable */
    406: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Not Implemented */
    501: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
    /** Service Unavailable */
    503: {
      headers: {};
      content: {
        "application/json": components["schemas"]["ErrorInformationResponse"];
      };
    };
  };
  parameters: {
    /** The identifier value. */
    ID: string;
    /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
    "Content-Type": string;
    /** The `Date` header field indicates the date when the request was sent. */
    Date: string;
    /**
     * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
     *
     * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
     */
    "X-Forwarded-For": string;
    /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
    "FSPIOP-Source": string;
    /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
    "FSPIOP-Destination": string;
    /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
    "FSPIOP-Encryption": string;
    /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
    "FSPIOP-Signature": string;
    /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
    "FSPIOP-URI": string;
    /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
    "FSPIOP-HTTP-Method": string;
    /** The `Accept` header field indicates the version of the API the client would like the server to use. */
    Accept: string;
    /**
     * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
     *
     * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
     */
    "Content-Length": number;
    /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
    Type: string;
    /** The type of the service identifier. For example, `THIRD_PARTY_DFSP` */
    ServiceType: string;
  };
  headers: {
    /**
     * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
     *
     * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
     */
    "Content-Length"?: number;
    /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
    "Content-Type": string;
  };
}

export interface operations {
  /** The HTTP request `GET /accounts/{ID}` is used to retrieve the list of potential accounts available for linking. */
  GetAccountsByUserId: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** The HTTP request `PUT /accounts/{ID}` is used to return the list of potential accounts available for linking */
  UpdateAccountsByUserId: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountsIDPutResponse"];
      };
    };
  };
  /** The HTTP request `PUT /accounts/{ID}/error` is used to return error information */
  UpdateAccountsByUserIdError: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Details of the error returned. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ErrorInformationObject"];
      };
    };
  };
  /** The HTTP request `POST /authorizations` is used to request the Payer to enter the applicable credentials in the PISP system. */
  AuthorizationsPostRequest: {
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Authorization request details */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthorizationsPostRequest"];
      };
    };
  };
  /**
   * The callback PUT /authorizations/ is used to inform the client of the
   * result of a previously-requested authorization. The ID in the URI should
   * contain the one that was used in the POST /authorizations/ requestBody.transactionRequestId @ OUTBOUND
   */
  InboundAuthorizationsIDPutResponse: {
    parameters: {
      path: {
        ID: string;
      };
    };
    responses: {
      /** information about result of required (via POST) /authorization */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorizationsIDPutResponse"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** A request from a PISP to a DFSP to start the process of delegating consent */
  CreateConsentRequest: {
    parameters: {
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** The consentRequest to create */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConsentRequestsPostRequest"];
      };
    };
  };
  /**
   * DFSP updates auth channels and/or auth uri in response to consentRequest.
   *
   * PISP updates the consentRequest to include authorization token from their user,
   * which the DFSP is to then verify.
   */
  UpdateConsentRequest: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ConsentRequestsIDPutResponseWeb"]
          | components["schemas"]["ConsentRequestsIDPutResponseOTP"];
      };
    };
  };
  /** PISP sends user's OTP token to a DFSP to verify user trusts aforementioned PISP */
  PatchConsentRequest: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConsentRequestsIDPatchRequest"];
      };
    };
  };
  /** DFSP responds to the PISP if something went wrong with validating an OTP or secret. */
  NotifyErrorConsentRequests: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Error information returned. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ErrorInformationObject"];
      };
    };
  };
  /** DFSP sends this request to the PISP after granting consent. DFSP sends this request to an Auth service to validate a signed consent. */
  PostConsents: {
    parameters: {
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ConsentsPostRequestAUTH"]
          | components["schemas"]["ConsentsPostRequestPISP"];
      };
    };
  };
  /** The HTTP request `GET /consents/{ID}` is used to get information regarding a consent object created or requested earlier. The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`. summary: GetConsent */
  GetConsent: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /**
   * The HTTP request `PUT /consents/{ID}` is used by the PISP and Auth Service.
   *
   * - Called by a `PISP` to after signing a challenge. Sent to an DFSP for verification.
   * - Called by a `auth-service` to notify a DFSP that a credential has been verified and registered.
   */
  PutConsentByID: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ConsentsIDPutResponseSigned"]
          | components["schemas"]["ConsentsIDPutResponseVerified"];
      };
    };
  };
  /**
   * The HTTP request `DELETE /consents/{ID}` is used to mark as deleted a previously created consent.
   *
   * - Called by a PISP when a user wants to remove their consent.
   */
  DeleteConsentByID: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /**
   * The HTTP request `PATCH /consents/{ID}` is used
   *
   * - In account linking in the Credential Registration phase. Used by a DFSP
   *   to notify a PISP a credential has been verified and registered with an
   *   Auth service.
   *
   * - In account unlinking by a hub hosted auth service and by DFSPs
   *   in non-hub hosted scenarios to notify participants of a consent being revoked.
   *
   *   Called by a `auth-service` to notify a PISP and DFSP of consent status in hub hosted scenario.
   *   Called by a `DFSP` to notify a PISP of consent status in non-hub hosted scenario.
   */
  PatchConsentByID: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ConsentsIDPatchResponseVerified"]
          | components["schemas"]["ConsentsIDPatchResponseRevoked"];
      };
    };
  };
  /** DFSP responds to the PISP if something went wrong with validating or storing consent. */
  NotifyErrorConsents: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Error information returned. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ErrorInformationObject"];
      };
    };
  };
  /** The HTTP request GET /health is used to return the current status of the API. */
  HealthGet: {
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** The HTTP request GET /metrics is used to return metrics for the API. */
  MetricsGet: {
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** The callback `PUT /participants/{ID}` is used to inform the client of the result of the creation of the provided list of identities. */
  PutParticipantsByID: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Participant information returned. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ParticipantsIDPutResponse"];
      };
    };
  };
  /** If there is an error during FSP information creation in the server, the error callback `PUT /participants/{ID}/error` is used. The `{ID}` in the URI should contain the requestId that was used for the creation of the participant information. */
  PutParticipantsByIDAndError: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Details of the error returned. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ErrorInformationObject"];
      };
    };
  };
  /** The HTTP request `GET /participants/{Type}/{ID}` (or `GET /participants/{Type}/{ID}/{SubId}`) is used to find out in which FSP the requested Party, defined by `{Type}`, `{ID}` and optionally `{SubId}`, is located (for example, `GET /participants/MSISDN/123456789`, or `GET /participants/BUSINESS/shoecompany/employee1`). This HTTP request should support a query string for filtering of currency. To use filtering of currency, the HTTP request `GET /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency. */
  ParticipantsByTypeAndID: {
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components["parameters"]["Type"];
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** The callback `PUT /participants/{Type}/{ID}` (or `PUT /participants/{Type}/{ID}/{SubId}`) is used to inform the client of a successful result of the lookup, creation, or deletion of the FSP information related to the Party. If the FSP information is deleted, the fspId element should be empty; otherwise the element should include the FSP information for the Party. */
  ParticipantsByTypeAndID3: {
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components["parameters"]["Type"];
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Participant information returned. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ParticipantsTypeIDPutResponse"];
      };
    };
  };
  /** The HTTP request `POST /participants/{Type}/{ID}` (or `POST /participants/{Type}/{ID}/{SubId}`) is used to create information in the server regarding the provided identity, defined by `{Type}`, `{ID}`, and optionally `{SubId}` (for example, `POST /participants/MSISDN/123456789` or `POST /participants/BUSINESS/shoecompany/employee1`). An ExtensionList element has been added to this reqeust in version v1.1 */
  ParticipantsByIDAndType: {
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components["parameters"]["Type"];
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Participant information to be created. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ParticipantsTypeIDSubIDPostRequest"];
      };
    };
  };
  /**
   * The HTTP request `DELETE /participants/{Type}/{ID}` (or `DELETE /participants/{Type}/{ID}/{SubId}`) is used to delete information in the server regarding the provided identity, defined by `{Type}` and `{ID}`) (for example, `DELETE /participants/MSISDN/123456789`), and optionally `{SubId}`. This HTTP request should support a query string to delete FSP information regarding a specific currency only. To delete a specific currency only, the HTTP request `DELETE /participants/{Type}/{ID}?currency=XYZ` should be used, where `XYZ` is the requested currency.
   *
   * **Note:** The Account Lookup System should verify that it is the Party’s current FSP that is deleting the FSP information.
   */
  ParticipantsByTypeAndID2: {
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components["parameters"]["Type"];
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /** If the server is unable to find, create or delete the associated FSP of the provided identity, or another processing error occurred, the error callback `PUT /participants/{Type}/{ID}/error` (or `PUT /participants/{Type}/{ID}/{SubId}/error`) is used. */
  ParticipantsErrorByTypeAndID: {
    parameters: {
      path: {
        /** The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`. */
        Type: components["parameters"]["Type"];
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Details of the error returned. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ErrorInformationObject"];
      };
    };
  };
  /** The HTTP request POST `/thirdpartyRequests/transactions` is used by a PISP to initiate a 3rd party Transaction request with a DFSP */
  CreateThirdpartyTransactionRequests: {
    parameters: {
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Transaction request to be created. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThirdpartyRequestsTransactionsPostRequest"];
      };
    };
  };
  /** The HTTP request `POST /thirdpartyRequests/authorizations` is used to request the Payer to enter the applicable credentials in the PISP system. */
  PostThirdpartyRequestsAuthorizations: {
    parameters: {
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Authorization request details */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThirdpartyRequestsAuthorizationsPostRequest"];
      };
    };
  };
  /**
   * The callback PUT /thirdpartyRequests/authorizations/{ID} is used to inform the client of the
   * result of a previously-requested authorization. The ID in the URI should
   * contain the one that was used in the POST /authorizations/ requestBody.transactionRequestId @ OUTBOUND
   */
  PutThirdpartyRequestsAuthorizationsById: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Signed authorization object */
    requestBody: {
      content: {
        "application/json":
          | components["schemas"]["ThirdpartyRequestsAuthorizationsIDPutResponseFIDO"]
          | components["schemas"]["ThirdpartyRequestsAuthorizationsIDPutResponseGeneric"];
      };
    };
  };
  /**
   * The HTTP request `PUT /thirdpartyRequests/authorizations/{ID}/error` is used by the DFSP or PISP to inform
   * the other party that something went wrong with a Thirdparty Transaction Authorization Request.
   *
   * The PISP may use this to tell the DFSP that the Thirdparty Transaction Authorization Request is invalid or doesn't
   * match a `transactionRequestId`.
   *
   * The DFSP may use this to tell the PISP that the signed challenge returned in `PUT /thirdpartyRequest/authorizations/{ID}`
   * was invalid.
   */
  PutThirdpartyRequestsAuthorizationsByIdAndError: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Error information returned. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ErrorInformationObject"];
      };
    };
  };
  /**
   * The HTTP request `PUT /thirdpartyRequests/transactions/{id}/authorizations` is used by the auth-service to update a thirdparty authorization after successful validation.
   * For an unsuccessful authorization result, the `PUT /thirdpartyRequests/transactions/{id}/authorizations/error` will be called by the auth-service, instead of this endpoint.
   */
  UpdateThirdpartyAuthorization: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** The thirdparty authorization details to update */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThirdpartyRequestsTransactionsIDAuthorizationsPutResponse"];
      };
    };
  };
  /** The HTTP request `POST /thirdpartyRequests/transactions/{id}/authorizations` is used by the DFSP to verify a third party authorization. */
  VerifyThirdPartyAuthorization: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** The thirdparty authorization details to verify */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThirdpartyRequestsTransactionsIDAuthorizationsPostRequest"];
      };
    };
  };
  /**
   * The HTTP request `GET /thirdpartyRequests/transactions/{ID}` is used to request the
   * retrieval of a third party transaction request.
   */
  GetThirdpartyTransactionRequests: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /**
   * The HTTP request `PUT /thirdpartyRequests/transactions/{ID}` is used by the DFSP to inform the client about
   * the status of a previously requested thirdparty transaction request.
   *
   * Switch(Thirdparty API Adapter) -> PISP
   */
  UpdateThirdPartyTransactionRequests: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThirdpartyRequestsTransactionsIDPutResponse"];
      };
    };
  };
  /**
   * The HTTP request `PATCH /thirdpartyRequests/transactions/{ID}` is used to
   * notify a thirdparty of the outcome of a transaction request.
   *
   * Switch(Thirdparty API Adapter) -> PISP
   */
  NotifyThirdpartyTransactionRequests: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThirdpartyRequestsTransactionsIDPatchResponse"];
      };
    };
  };
  /**
   * If the server is unable to find the transaction request, or another processing error occurs,
   * the error callback `PUT /thirdpartyRequests/transactions/{ID}/error` is used.
   * The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of
   * the thirdparty transaction request.
   */
  ThirdpartyTransactionRequestsError: {
    parameters: {
      path: {
        /** The identifier value. */
        ID: components["parameters"]["ID"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Error information returned. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ErrorInformationObject"];
      };
    };
  };
  /**
   * The HTTP request `GET /services/{ServiceType}` is used to retrieve the list of participants
   * that support a specified service.
   */
  GetServicesByServiceType: {
    parameters: {
      path: {
        /** The type of the service identifier. For example, `THIRD_PARTY_DFSP` */
        ServiceType: components["parameters"]["ServiceType"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /** The `Accept` header field indicates the version of the API the client would like the server to use. */
        Accept: components["parameters"]["Accept"];
      };
    };
    responses: {
      202: components["responses"]["202"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
  };
  /**
   * The HTTP request `PUT /services/{ServiceType}` is used to return list of participants
   * that support a specified service.
   */
  PutServicesByServiceType: {
    parameters: {
      path: {
        /** The type of the service identifier. For example, `THIRD_PARTY_DFSP` */
        ServiceType: components["parameters"]["ServiceType"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ServicesServiceTypePutResponse"];
      };
    };
  };
  /** The HTTP request `PUT /services/{ServiceType}/error` is used to return error information */
  PutServicesByServiceTypeAndError: {
    parameters: {
      path: {
        /** The type of the service identifier. For example, `THIRD_PARTY_DFSP` */
        ServiceType: components["parameters"]["ServiceType"];
      };
      header: {
        /** The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        "Content-Type": components["parameters"]["Content-Type"];
        /** The `Date` header field indicates the date when the request was sent. */
        Date: components["parameters"]["Date"];
        /**
         * The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.
         *
         * **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.
         */
        "X-Forwarded-For"?: components["parameters"]["X-Forwarded-For"];
        /** The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`). */
        "FSPIOP-Source": components["parameters"]["FSPIOP-Source"];
        /** The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty. */
        "FSPIOP-Destination"?: components["parameters"]["FSPIOP-Destination"];
        /** The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request. */
        "FSPIOP-Encryption"?: components["parameters"]["FSPIOP-Encryption"];
        /** The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature. */
        "FSPIOP-Signature"?: components["parameters"]["FSPIOP-Signature"];
        /** The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-URI"?: components["parameters"]["FSPIOP-URI"];
        /** The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set). */
        "FSPIOP-HTTP-Method"?: components["parameters"]["FSPIOP-HTTP-Method"];
        /**
         * The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         * **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).
         */
        "Content-Length"?: components["parameters"]["Content-Length"];
      };
    };
    responses: {
      200: components["responses"]["200"];
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      403: components["responses"]["403"];
      404: components["responses"]["404"];
      405: components["responses"]["405"];
      406: components["responses"]["406"];
      501: components["responses"]["501"];
      503: components["responses"]["503"];
    };
    /** Details of the error returned. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ErrorInformationObject"];
      };
    };
  };
}

export interface external {}
