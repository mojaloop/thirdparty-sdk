/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/health': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check endpoint
         * @description The HTTP request GET /health is used to return the current status of the API.
         */
        get: operations['HealthGet'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/metrics': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Prometheus metrics endpoint
         * @description The HTTP request GET /metrics is used to return metrics for the API.
         */
        get: operations['MetricsGet'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/thirdpartyTransaction/partyLookup': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Thirdparty transaction party lookup.
         * @description The HTTP request `POST /thirdpartyTransaction/partyLookup` is used to lookup information regarding the requested Party, defined by `Type`, `ID` and optionally `SubId`.
         *
         */
        post: operations['ThirdpartyTransactionPartyLookup'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/thirdpartyTransaction/{ID}/initiate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Initiates a third party transaction.
         * @description The HTTP request `POST /thirdpartyTransaction/{ID}/initiate` is sent to the Switch to initiate a third party request transaction.
         *
         */
        post: operations['ThirdpartyTransactionIDInitiate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/thirdpartyTransaction/{ID}/approve': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Approve a third party transaction.
         * @description The HTTP request `POST /thirdpartyTransaction/{ID}/approve` is used to approve a third party transaction .
         *
         */
        post: operations['ThirdpartyTransactionIDApprove'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/linking/providers': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GetLinkingProviders
         * @description The HTTP request `GET /linking/providers` is used to retrieve a list of thirdparty enabled DFSP identifiers.
         *
         */
        get: operations['GetLinkingProviders'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/linking/accounts/{fspId}/{userId}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * GetLinkingAccountsByUserId
         * @description The HTTP request `GET /linking/accounts/{fspId}/{userId}` is used to retrieve the list of potential accounts available for linking.
         *
         */
        get: operations['GetLinkingAccountsByUserId'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/linking/request-consent': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * PostLinkingRequestConsent
         * @description The HTTP request `POST /linking/request-consent` is used to by a PISP to ask
         *     a specific DFSP to start the process of establishing consent between three parties.
         *
         *     - The PISP
         *     - The DFSP
         *     - A user presumed to be a customer of 'The DFSP'
         *
         */
        post: operations['PostLinkingRequestConsent'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/linking/request-consent/{ID}/authenticate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Outbound PATCH /linking/request-consent/{ID}/authenticate endpoint
         * @description Used in the authentication phase of account linking.
         *     Used by the PISP to pass an Auth token on behalf of the user to the DFSP to establish a chain of trust.
         *
         */
        patch: operations['PatchLinkingRequestConsentIDAuthenticate'];
        trace?: never;
    };
    '/linking/request-consent/{ID}/pass-credential': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Outbound POST /linking/request-consent/{ID}/pass-credential endpoint
         * @description Used in the credential registration phase of account linking.
         *     Used by the PISP to pass an credential on behalf of the user to the DFSP.
         *
         */
        post: operations['PostLinkingRequestConsentIDPassCredential'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ErrorCode
         * @description The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.
         * @example 5100
         */
        ErrorCode: string;
        /**
         * ErrorDescription
         * @description Error description string.
         */
        ErrorDescription: string;
        /**
         * ExtensionKey
         * @description Extension key.
         */
        ExtensionKey: string;
        /**
         * ExtensionValue
         * @description Extension value.
         */
        ExtensionValue: string;
        /**
         * Extension
         * @description Data model for the complex type Extension.
         */
        Extension: {
            key: components['schemas']['ExtensionKey'];
            value: components['schemas']['ExtensionValue'];
        };
        /**
         * ExtensionList
         * @description Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.
         */
        ExtensionList: {
            /** @description Number of Extension elements. */
            extension: components['schemas']['Extension'][];
        };
        /**
         * ErrorInformation
         * @description Data model for the complex type ErrorInformation.
         */
        ErrorInformation: {
            errorCode: components['schemas']['ErrorCode'];
            errorDescription: components['schemas']['ErrorDescription'];
            extensionList?: components['schemas']['ExtensionList'];
        };
        /**
         * ErrorInformationResponse
         * @description Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.
         */
        ErrorInformationResponse: {
            errorInformation?: components['schemas']['ErrorInformation'];
        };
        /**
         * PartyIdType
         * @description Below are the allowed values for the enumeration.
         *     - MSISDN - An MSISDN (Mobile Station International Subscriber Directory
         *     Number, that is, the phone number) is used as reference to a participant.
         *     The MSISDN identifier should be in international format according to the
         *     [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).
         *     Optionally, the MSISDN may be prefixed by a single plus sign, indicating the
         *     international prefix.
         *     - EMAIL - An email is used as reference to a
         *     participant. The format of the email should be according to the informational
         *     [RFC 3696](https://tools.ietf.org/html/rfc3696).
         *     - PERSONAL_ID - A personal identifier is used as reference to a participant.
         *     Examples of personal identification are passport number, birth certificate
         *     number, and national registration number. The identifier number is added in
         *     the PartyIdentifier element. The personal identifier type is added in the
         *     PartySubIdOrType element.
         *     - BUSINESS - A specific Business (for example, an organization or a company)
         *     is used as reference to a participant. The BUSINESS identifier can be in any
         *     format. To make a transaction connected to a specific username or bill number
         *     in a Business, the PartySubIdOrType element should be used.
         *     - DEVICE - A specific device (for example, a POS or ATM) ID connected to a
         *     specific business or organization is used as reference to a Party.
         *     For referencing a specific device under a specific business or organization,
         *     use the PartySubIdOrType element.
         *     - ACCOUNT_ID - A bank account number or FSP account ID should be used as
         *     reference to a participant. The ACCOUNT_ID identifier can be in any format,
         *     as formats can greatly differ depending on country and FSP.
         *     - IBAN - A bank account number or FSP account ID is used as reference to a
         *     participant. The IBAN identifier can consist of up to 34 alphanumeric
         *     characters and should be entered without whitespace.
         *     - ALIAS An alias is used as reference to a participant. The alias should be
         *     created in the FSP as an alternative reference to an account owner.
         *     Another example of an alias is a username in the FSP system.
         *     The ALIAS identifier can be in any format. It is also possible to use the
         *     PartySubIdOrType element for identifying an account under an Alias defined
         *     by the PartyIdentifier.
         *     - CONSENT - A Consent represents an agreement between a PISP, a Customer and
         *     a DFSP which allows the PISP permission to perform actions on behalf of the
         *     customer. A Consent has an authoritative source: either the DFSP who issued
         *     the Consent, or an Auth Service which administers the Consent.
         *     - THIRD_PARTY_LINK - A Third Party Link represents an agreement between a PISP,
         *     a DFSP, and a specific Customer's account at the DFSP. The content of the link
         *     is created by the DFSP at the time when it gives permission to the PISP for
         *     specific access to a given account.
         *
         * @example PERSONAL_ID
         * @enum {string}
         */
        PartyIdType: 'MSISDN' | 'EMAIL' | 'PERSONAL_ID' | 'BUSINESS' | 'DEVICE' | 'ACCOUNT_ID' | 'IBAN' | 'ALIAS' | 'CONSENT' | 'THIRD_PARTY_LINK';
        /**
         * PartyIdentifier
         * @description Identifier of the Party.
         * @example 16135551212
         */
        PartyIdentifier: string;
        /**
         * PartySubIdOrType
         * @description Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.
         */
        PartySubIdOrType: string;
        /**
         * FspId
         * @description FSP identifier.
         */
        FspId: string;
        /**
         * PartyIdInfo
         * @description Data model for the complex type PartyIdInfo.
         */
        PartyIdInfo: {
            partyIdType: components['schemas']['PartyIdType'];
            partyIdentifier: components['schemas']['PartyIdentifier'];
            partySubIdOrType?: components['schemas']['PartySubIdOrType'];
            fspId?: components['schemas']['FspId'];
            extensionList?: components['schemas']['ExtensionList'];
        };
        /**
         * CorrelationId
         * @description Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
         * @example b51ec534-ee48-4575-b6a9-ead2955b8069
         */
        CorrelationId: string;
        /** @description ThirdpartyTransaction partyLookup request */
        ThirdpartyTransactionPartyLookupRequest: {
            payee: components['schemas']['PartyIdInfo'];
            transactionRequestId: components['schemas']['CorrelationId'];
        };
        /**
         * ThirdpartyTransactionPartyLookupState
         * @description state of thirdparty transaction partyLookup phase
         * @enum {string}
         */
        ThirdpartyTransactionPartyLookupState: 'start' | 'partyLookupSuccess' | 'partyLookupFailure' | 'errored';
        /** ThirdpartyTransactionPartyLookupResponseError */
        ThirdpartyTransactionPartyLookupResponseError: {
            currentState: components['schemas']['ThirdpartyTransactionPartyLookupState'];
            errorInformation: components['schemas']['ErrorInformation'];
        };
        /**
         * MerchantClassificationCode
         * @description A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.
         */
        MerchantClassificationCode: string;
        /**
         * PartyName
         * @description Name of the Party. Could be a real name or a nickname.
         */
        PartyName: string;
        /**
         * FirstName
         * @description First name of the Party (Name Type).
         * @example Henrik
         */
        FirstName: string;
        /**
         * MiddleName
         * @description Middle name of the Party (Name Type).
         * @example Johannes
         */
        MiddleName: string;
        /**
         * LastName
         * @description Last name of the Party (Name Type).
         * @example Karlsson
         */
        LastName: string;
        /**
         * PartyComplexName
         * @description Data model for the complex type PartyComplexName.
         */
        PartyComplexName: {
            firstName?: components['schemas']['FirstName'];
            middleName?: components['schemas']['MiddleName'];
            lastName?: components['schemas']['LastName'];
        };
        /**
         * DateofBirth (type Date)
         * @description Date of Birth of the Party.
         * @example 1966-06-16
         */
        DateOfBirth: string;
        /**
         * PartyPersonalInfo
         * @description Data model for the complex type PartyPersonalInfo.
         */
        PartyPersonalInfo: {
            complexName?: components['schemas']['PartyComplexName'];
            dateOfBirth?: components['schemas']['DateOfBirth'];
        };
        /** ThirdpartyTransactionPartyLookupResponseSuccess */
        ThirdpartyTransactionPartyLookupResponseSuccess: {
            currentState: components['schemas']['ThirdpartyTransactionPartyLookupState'];
            party: {
                partyIdInfo?: components['schemas']['PartyIdInfo'];
                merchantClassificationCode?: components['schemas']['MerchantClassificationCode'];
                name?: components['schemas']['PartyName'];
                personalInfo?: components['schemas']['PartyPersonalInfo'];
            };
        };
        ThirdpartyTransactionPartyLookupResponse: components['schemas']['ThirdpartyTransactionPartyLookupResponseError'] | components['schemas']['ThirdpartyTransactionPartyLookupResponseSuccess'];
        /**
         * Party
         * @description Data model for the complex type Party.
         */
        Party: {
            partyIdInfo: components['schemas']['PartyIdInfo'];
            merchantClassificationCode?: components['schemas']['MerchantClassificationCode'];
            name?: components['schemas']['PartyName'];
            personalInfo?: components['schemas']['PartyPersonalInfo'];
        };
        /**
         * PartyIdTypeTPLink
         * @description - THIRD_PARTY_LINK - is the DFSP's internal reference which allows DFSP to find out the corresponding consent
         *
         * @example PERSONAL_ID
         * @enum {string}
         */
        PartyIdTypeTPLink: 'THIRD_PARTY_LINK';
        /**
         * PartyIdInfo
         * @description Data model for the complex type PartyIdInfo.
         */
        PartyIdInfoTPLink: {
            partyIdType: components['schemas']['PartyIdTypeTPLink'];
            partyIdentifier: components['schemas']['PartyIdentifier'];
            partySubIdOrType?: components['schemas']['PartySubIdOrType'];
            fspId?: components['schemas']['FspId'];
            extensionList?: components['schemas']['ExtensionList'];
        };
        /**
         * AmountType
         * @description Below are the allowed values for the enumeration AmountType.
         *     - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.
         *     - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.
         * @example RECEIVE
         * @enum {string}
         */
        AmountType: 'SEND' | 'RECEIVE';
        /**
         * Currency
         * @description The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.
         * @enum {string}
         */
        Currency: 'AED' | 'AFN' | 'ALL' | 'AMD' | 'ANG' | 'AOA' | 'ARS' | 'AUD' | 'AWG' | 'AZN' | 'BAM' | 'BBD' | 'BDT' | 'BGN' | 'BHD' | 'BIF' | 'BMD' | 'BND' | 'BOB' | 'BRL' | 'BSD' | 'BTN' | 'BWP' | 'BYN' | 'BZD' | 'CAD' | 'CDF' | 'CHF' | 'CLP' | 'CNY' | 'COP' | 'CRC' | 'CUC' | 'CUP' | 'CVE' | 'CZK' | 'DJF' | 'DKK' | 'DOP' | 'DZD' | 'EGP' | 'ERN' | 'ETB' | 'EUR' | 'FJD' | 'FKP' | 'GBP' | 'GEL' | 'GGP' | 'GHS' | 'GIP' | 'GMD' | 'GNF' | 'GTQ' | 'GYD' | 'HKD' | 'HNL' | 'HRK' | 'HTG' | 'HUF' | 'IDR' | 'ILS' | 'IMP' | 'INR' | 'IQD' | 'IRR' | 'ISK' | 'JEP' | 'JMD' | 'JOD' | 'JPY' | 'KES' | 'KGS' | 'KHR' | 'KMF' | 'KPW' | 'KRW' | 'KWD' | 'KYD' | 'KZT' | 'LAK' | 'LBP' | 'LKR' | 'LRD' | 'LSL' | 'LYD' | 'MAD' | 'MDL' | 'MGA' | 'MKD' | 'MMK' | 'MNT' | 'MOP' | 'MRO' | 'MUR' | 'MVR' | 'MWK' | 'MXN' | 'MYR' | 'MZN' | 'NAD' | 'NGN' | 'NIO' | 'NOK' | 'NPR' | 'NZD' | 'OMR' | 'PAB' | 'PEN' | 'PGK' | 'PHP' | 'PKR' | 'PLN' | 'PYG' | 'QAR' | 'RON' | 'RSD' | 'RUB' | 'RWF' | 'SAR' | 'SBD' | 'SCR' | 'SDG' | 'SEK' | 'SGD' | 'SHP' | 'SLL' | 'SOS' | 'SPL' | 'SRD' | 'STD' | 'SVC' | 'SYP' | 'SZL' | 'THB' | 'TJS' | 'TMT' | 'TND' | 'TOP' | 'TRY' | 'TTD' | 'TVD' | 'TWD' | 'TZS' | 'UAH' | 'UGX' | 'USD' | 'UYU' | 'UZS' | 'VEF' | 'VND' | 'VUV' | 'WST' | 'XAF' | 'XCD' | 'XDR' | 'XOF' | 'XPF' | 'XTS' | 'XXX' | 'YER' | 'ZAR' | 'ZMW' | 'ZWD';
        /**
         * Amount
         * @description The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.
         * @example 123.45
         */
        Amount: string;
        /**
         * Money
         * @description Data model for the complex type Money.
         */
        Money: {
            currency: components['schemas']['Currency'];
            amount: components['schemas']['Amount'];
        };
        /**
         * TransactionScenario
         * @description Below are the allowed values for the enumeration.
         *     - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.
         *     - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.
         *     - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.
         *     - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.
         *     - REFUND - Used for performing a refund of transaction.
         * @example DEPOSIT
         * @enum {string}
         */
        TransactionScenario: 'DEPOSIT' | 'WITHDRAWAL' | 'TRANSFER' | 'PAYMENT' | 'REFUND';
        /**
         * TransactionSubScenario
         * @description Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).
         * @example LOCALLY_DEFINED_SUBSCENARIO
         */
        TransactionSubScenario: string;
        /**
         * TransactionInitiator
         * @description Below are the allowed values for the enumeration.
         *     - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.
         *     - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.
         * @example PAYEE
         * @enum {string}
         */
        TransactionInitiator: 'PAYER' | 'PAYEE';
        /**
         * TransactionInitiatorType
         * @description Below are the allowed values for the enumeration.
         *     - CONSUMER - Consumer is the initiator of the transaction.
         *     - AGENT - Agent is the initiator of the transaction.
         *     - BUSINESS - Business is the initiator of the transaction.
         *     - DEVICE - Device is the initiator of the transaction.
         * @example CONSUMER
         * @enum {string}
         */
        TransactionInitiatorType: 'CONSUMER' | 'AGENT' | 'BUSINESS' | 'DEVICE';
        /**
         * RefundReason
         * @description Reason for the refund.
         * @example Free text indicating reason for the refund.
         */
        RefundReason: string;
        /**
         * Refund
         * @description Data model for the complex type Refund.
         */
        Refund: {
            originalTransactionId: components['schemas']['CorrelationId'];
            refundReason?: components['schemas']['RefundReason'];
        };
        /**
         * BalanceOfPayments
         * @description (BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.
         * @example 123
         */
        BalanceOfPayments: string;
        /**
         * TransactionType
         * @description Data model for the complex type TransactionType.
         */
        TransactionType: {
            scenario: components['schemas']['TransactionScenario'];
            subScenario?: components['schemas']['TransactionSubScenario'];
            initiator: components['schemas']['TransactionInitiator'];
            initiatorType: components['schemas']['TransactionInitiatorType'];
            refundInfo?: components['schemas']['Refund'];
            balanceOfPayments?: components['schemas']['BalanceOfPayments'];
        };
        /**
         * ThirdpartyTransactionIDInitiateRequest
         * @description The object sent in the POST `/thirdpartyTransaction/{ID}/initiate` request.
         */
        ThirdpartyTransactionIDInitiateRequest: {
            payee: components['schemas']['Party'];
            payer: components['schemas']['PartyIdInfoTPLink'];
            amountType: components['schemas']['AmountType'];
            amount: components['schemas']['Money'];
            transactionType: components['schemas']['TransactionType'];
            /** @example 2016-05-24T08:38:08.699-04:00 */
            expiration: string;
        };
        /**
         * ThirdpartyTransactionIDInitiateState
         * @description state of thirdparty transaction for initiate phase
         * @enum {string}
         */
        ThirdpartyTransactionIDInitiateState: 'partyLookupSuccess' | 'authorizationReceived' | 'errored';
        /** ThirdpartyTransactionIDInitateResponseError */
        ThirdpartyTransactionIDInitiateResponseError: {
            currentState: components['schemas']['ThirdpartyTransactionIDInitiateState'];
            errorInformation: components['schemas']['ErrorInformation'];
        };
        /**
         * DateTime
         * @description The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z indicates Zulu time zone, same as UTC).
         * @example 2016-05-24T08:38:08.699-04:00
         */
        DateTime: string;
        /**
         * ThirdpartyRequestsAuthorizationsPostRequest
         * @description Used by: DFSP
         *     The HTTP request POST /thirdpartyRequests/authorizations is used to request the validation by a customer for the transfer described in the request.
         *     Callback and data model information for POST /thirdpartyRequests/authorizations:
         *     Callback - PUT /thirdpartyRequests/authorizations/{ID} Error Callback - PUT /thirdpartyRequests/authorizations/{ID}/error Data Model - See below url
         *     https://github.com/mojaloop/documentation/blob/main/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31612-post-thirdpartyrequestsauthorizations
         */
        ThirdpartyRequestsAuthorizationsPostRequest: {
            authorizationRequestId: components['schemas']['CorrelationId'];
            transactionRequestId: components['schemas']['CorrelationId'];
            /** @description The challenge that the PISP's client is to sign */
            challenge: string;
            /** @description The amount that will be debited from the sending customer's account as a consequence of the transaction. */
            transferAmount: components['schemas']['Money'];
            /** @description The amount that will be credited to the receiving customer's account as a consequence of the transaction. */
            payeeReceiveAmount: components['schemas']['Money'];
            /** @description The amount of fees that the paying customer will be charged as part of the transaction. */
            fees: components['schemas']['Money'];
            /** @description Information about the Payer type, id, sub-type/id, FSP Id in the proposed financial transaction. */
            payer: components['schemas']['PartyIdInfo'];
            /** @description Information about the Payee in the proposed financial transaction. */
            payee: components['schemas']['Party'];
            transactionType: components['schemas']['TransactionType'];
            /** @description The time by which the transfer must be completed, set by the payee DFSP. */
            expiration: components['schemas']['DateTime'];
            extensionList?: components['schemas']['ExtensionList'];
        };
        /** ThirdpartyTransactionIDInitateResponseSuccess */
        ThirdpartyTransactionIDInitiateResponseSuccess: {
            currentState: components['schemas']['ThirdpartyTransactionIDInitiateState'];
            authorization: components['schemas']['ThirdpartyRequestsAuthorizationsPostRequest'];
        };
        ThirdpartyTransactionIDInitiateResponse: components['schemas']['ThirdpartyTransactionIDInitiateResponseError'] | components['schemas']['ThirdpartyTransactionIDInitiateResponseSuccess'];
        /**
         * AuthorizationResponseType
         * @description The customer accepted the terms of the transfer
         *
         * @enum {string}
         */
        AuthorizationResponseTypeAccepted: 'ACCEPTED';
        /**
         * SignedPayloadTypeGeneric
         * @description Describes a challenge that has been signed with a private key
         * @enum {string}
         */
        SignedPayloadTypeGeneric: 'GENERIC';
        /** @description The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters. */
        BinaryString: string;
        /** SignedPayloadGeneric */
        SignedPayloadGeneric: {
            signedPayloadType: components['schemas']['SignedPayloadTypeGeneric'];
            genericSignedPayload: components['schemas']['BinaryString'];
        };
        /**
         * ThirdpartyRequestsAuthorizationsIDPutResponseGeneric
         * @description The object sent in the PUT /thirdpartyRequests/authorizations/{ID} callback.
         */
        ThirdpartyRequestsAuthorizationsIDPutResponseGeneric: {
            responseType: components['schemas']['AuthorizationResponseTypeAccepted'];
            signedPayload: components['schemas']['SignedPayloadGeneric'];
            extensionList?: components['schemas']['ExtensionList'];
        };
        /**
         * SignedPayloadTypeFIDO
         * @description Describes a challenge that has been signed with FIDO Attestation flows
         * @enum {string}
         */
        SignedPayloadTypeFIDO: 'FIDO';
        /**
         * FIDOPublicKeyCredentialAssertion
         * @description A data model representing a FIDO Assertion result.
         *     Derived from PublicKeyCredential Interface in WebAuthN.
         *
         *     The PublicKeyCredential interface represents the below fields with a Type of
         *     Javascript ArrayBuffer.
         *     For this API, we represent ArrayBuffers as base64 encoded utf-8 strings.
         *
         *     https://github.com/mojaloop/documentation/blob/main/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32128-fidopublickeycredentialassertion
         *
         */
        FIDOPublicKeyCredentialAssertion: {
            /** @description credential id: identifier of pair of keys, base64 encoded
             *     https://w3c.github.io/webauthn/#ref-for-dom-credential-id
             *      */
            id: string;
            /** @description raw credential id: identifier of pair of keys, base64 encoded.
             *      */
            rawId: string;
            /** @description AuthenticatorAssertionResponse
             *      */
            response: {
                /** @description Authenticator data object.
                 *      */
                authenticatorData: string;
                /** @description JSON string with client data.
                 *      */
                clientDataJSON: string;
                /** @description The signature generated by the private key associated with this credential.
                 *      */
                signature: string;
                /** @description This field is optionally provided by the authenticator, and
                 *     represents the user.id that was supplied during registration.
                 *      */
                userHandle?: string;
            };
            /**
             * @description response type, we need only the type of public-key
             * @enum {string}
             */
            type: 'public-key';
        };
        /** SignedPayloadFIDO */
        SignedPayloadFIDO: {
            signedPayloadType: components['schemas']['SignedPayloadTypeFIDO'];
            fidoSignedPayload: components['schemas']['FIDOPublicKeyCredentialAssertion'];
        };
        /**
         * ThirdpartyRequestsAuthorizationsIDPutResponseFIDO
         * @description The object sent in the PUT /thirdpartyRequests/authorizations/{ID} callback.
         */
        ThirdpartyRequestsAuthorizationsIDPutResponseFIDO: {
            responseType: components['schemas']['AuthorizationResponseTypeAccepted'];
            signedPayload: components['schemas']['SignedPayloadFIDO'];
            extensionList?: components['schemas']['ExtensionList'];
        };
        /** ThirdpartyTransactionIDApproveRequest */
        ThirdpartyTransactionIDApproveRequest: {
            authorizationResponse: components['schemas']['ThirdpartyRequestsAuthorizationsIDPutResponseGeneric'] | components['schemas']['ThirdpartyRequestsAuthorizationsIDPutResponseFIDO'];
        };
        /**
         * ThirdpartyTransactionIDApproveState
         * @description state of thirdparty transaction
         * @enum {string}
         */
        ThirdpartyTransactionIDApproveState: 'authorizationReceived' | 'transactionStatusReceived' | 'errored';
        /** ThirdpartyTransactionIDApproveResponseError */
        ThirdpartyTransactionIDApproveResponseError: {
            currentState: components['schemas']['ThirdpartyTransactionIDApproveState'];
            errorInformation: components['schemas']['ErrorInformation'];
        };
        /**
         * TransactionRequestState
         * @description Below are the allowed values for the enumeration.
         *     - RECEIVED - Payer FSP has received the transaction from the Payee FSP.
         *     - PENDING - Payer FSP has sent the transaction request to the Payer.
         *     - ACCEPTED - Payer has approved the transaction.
         *     - REJECTED - Payer has rejected the transaction.
         * @enum {string}
         */
        TransactionRequestState: 'RECEIVED' | 'PENDING' | 'ACCEPTED' | 'REJECTED';
        /** ThirdpartyTransactionIDApproveResponseSuccess */
        ThirdpartyTransactionIDApproveResponseSuccess: {
            transactionStatus: {
                transactionRequestId?: components['schemas']['CorrelationId'];
                transactionRequestState: components['schemas']['TransactionRequestState'];
            };
            currentState: components['schemas']['ThirdpartyTransactionIDApproveState'];
        };
        ThirdpartyTransactionIDApproveResponse: components['schemas']['ThirdpartyTransactionIDApproveResponseError'] | components['schemas']['ThirdpartyTransactionIDApproveResponseSuccess'];
        /**
         * LinkingProvidersState
         * @description State of GET /linking/providers request
         * @enum {string}
         */
        LinkingProvidersState: 'start' | 'errored' | 'providersLookupSuccess';
        /** LinkingProvidersResponseError */
        LinkingProvidersResponseError: {
            errorInformation: components['schemas']['ErrorInformation'];
            currentState: components['schemas']['LinkingProvidersState'];
        };
        /** LinkingProvidersResponseSuccess */
        LinkingProvidersResponseSuccess: {
            providers: components['schemas']['FspId'][];
            currentState: components['schemas']['LinkingProvidersState'];
        };
        LinkingProvidersResponse: components['schemas']['LinkingProvidersResponseError'] | components['schemas']['LinkingProvidersResponseSuccess'];
        /**
         * AccountAddress
         * @description The AccountAddress data type is a variable length string with a maximum size of 1023 characters and consists of:
         *     Alphanumeric characters, upper or lower case. (Addresses are case-sensitive so that they can contain data encoded in formats such as base64url.)
         *     - Underscore (_) - Tilde (~) - Hyphen (-) - Period (.) Addresses MUST NOT end in a period (.) character
         *     An entity providing accounts to parties (i.e. a participant) can provide any value for an AccountAddress that is meaningful to that entity. It does not need to provide an address that makes the account identifiable outside the entity's domain.
         *     IMPORTANT: The policy for defining addresses and the life-cycle of these is at the discretion of the address space owner (the payer DFSP in this case).
         *     https://github.com/mojaloop/documentation/blob/main/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3212-accountaddress
         */
        AccountAddress: string;
        /**
         * Name
         * @description The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.
         *
         *     Regular Expression - The regular expression for restricting the Name type is "^(?!\s*$)[\w .,'-]{1,128}$". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).
         *
         *     **Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters.
         */
        Name: string;
        /**
         * Account
         * @description Data model for the complex type Account.
         *     https://github.com/mojaloop/documentation/blob/main/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3211-account
         */
        Account: {
            accountNickname: components['schemas']['Name'];
            address: components['schemas']['AccountAddress'];
            currency: components['schemas']['Currency'];
        };
        /**
         * AccountList
         * @description The AccountList data model is used to hold information about the accounts that a party controls.
         *     https://github.com/mojaloop/documentation/blob/main/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3213-accountlist
         */
        AccountList: components['schemas']['Account'][];
        /**
         * AccountsIDPutResponse
         * @description Callback and data model information for GET /accounts/{ID}:
         *     Callback - PUT /accounts/{ID} Error Callback - PUT /accounts/{ID}/error Data Model - Empty body
         *     The PUT /accounts/{ID} response is used to inform the requester of the result of a request for accounts information. The identifier ID given in the call are the values given in the original request.
         *     https://github.com/mojaloop/documentation/blob/main/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31121--put-accountsid
         */
        AccountsIDPutResponse: {
            accounts: components['schemas']['AccountList'];
            extensionList?: components['schemas']['ExtensionList'];
        };
        /**
         * ScopeAction
         * @description The ScopeAction element contains an access type which a PISP can request
         *     from a DFSP, or which a DFSP can grant to a PISP.
         *     It must be a member of the appropriate enumeration.
         *
         *     - ACCOUNTS_GET_BALANCE: PISP can request a balance for the linked account
         *     - ACCOUNTS_TRANSFER: PISP can request a transfer of funds from the linked account in the DFSP
         *     - ACCOUNTS_STATEMENT: PISP can request a statement of individual transactions on a user's account
         *
         * @enum {string}
         */
        ScopeAction: 'ACCOUNTS_GET_BALANCE' | 'ACCOUNTS_TRANSFER' | 'ACCOUNTS_STATEMENT';
        /**
         * LinkingRequestConsentPostRequest
         * @description The object sent in a `POST /linking/request-consent` request.
         */
        LinkingRequestConsentPostRequest: {
            toParticipantId: string;
            consentRequestId: components['schemas']['CorrelationId'];
            accounts: components['schemas']['Account'][];
            actions: components['schemas']['ScopeAction'][];
            /** @description ID used to associate request with GET /accounts request. */
            userId: string;
            /** @description The callback uri that the user will be redirected to after completing the WEB auth channel. */
            callbackUri: string;
        };
        /**
         * LinkingRequestConsentState
         * @description State of `POST /linking/request-consent` request
         * @enum {string}
         */
        LinkingRequestConsentState: 'start' | 'errored' | 'success' | 'OTPAuthenticationChannelResponseReceived' | 'WebAuthenticationChannelResponseReceived';
        /** LinkingRequestConsentResponseError */
        LinkingRequestConsentResponseError: {
            errorInformation: components['schemas']['ErrorInformation'];
            currentState: components['schemas']['LinkingRequestConsentState'];
        };
        /**
         * Scope
         * @description The Scope element contains an identifier defining, in the terms of a DFSP, an account on which access types can be requested or granted. It also defines the access types which are requested or granted.
         *     https://github.com/mojaloop/documentation/blob/main/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32121-scope
         */
        Scope: {
            address: components['schemas']['AccountAddress'];
            actions: components['schemas']['ScopeAction'][];
        };
        /**
         * ConsentRequestChannelTypeWeb
         * @description The web auth channel being used for `PUT /consentRequest/{ID}` request.
         *
         * @enum {string}
         */
        ConsentRequestChannelTypeWeb: 'WEB';
        /**
         * Uri
         * @description The API data type Uri is a JSON string in a canonical format that is restricted by a regular expression for interoperability reasons.
         *
         */
        Uri: string;
        /**
         * ConsentRequestsIDPutResponseWeb
         * @description The object sent in a `PUT /consentRequests/{ID}` request.
         *
         *     Schema used in the request consent phase of the account linking web flow,
         *     the result is the PISP being instructed on a specific URL where this
         *     supposed user should be redirected. This URL should be a place where
         *     the user can prove their identity (e.g., by logging in).
         *
         */
        ConsentRequestsIDPutResponseWeb: {
            scopes: components['schemas']['Scope'][];
            authChannels: components['schemas']['ConsentRequestChannelTypeWeb'][];
            callbackUri: components['schemas']['Uri'];
            authUri: components['schemas']['Uri'];
            extensionList?: components['schemas']['ExtensionList'];
        };
        /**
         * ConsentRequestChannelTypeOTP
         * @description The OTP auth channel being used for `PUT /consentRequests/{ID}` request.
         *
         * @enum {string}
         */
        ConsentRequestChannelTypeOTP: 'OTP';
        /**
         * ConsentRequestsIDPutResponseOTP
         * @description The object sent in a `PUT /consentRequests/{ID}` request.
         *
         *     Schema used in the request consent phase of the account linking OTP/SMS flow.
         *
         */
        ConsentRequestsIDPutResponseOTP: {
            scopes: components['schemas']['Scope'][];
            authChannels: components['schemas']['ConsentRequestChannelTypeOTP'][];
            callbackUri?: components['schemas']['Uri'];
            extensionList?: components['schemas']['ExtensionList'];
        };
        /** LinkingRequestConsentResponseSuccess */
        LinkingRequestConsentResponseSuccess: {
            channelResponse: components['schemas']['ConsentRequestsIDPutResponseWeb'] | components['schemas']['ConsentRequestsIDPutResponseOTP'];
            currentState: components['schemas']['LinkingRequestConsentState'];
        };
        LinkingRequestConsentResponse: components['schemas']['LinkingRequestConsentResponseError'] | components['schemas']['LinkingRequestConsentResponseSuccess'];
        /**
         * LinkingRequestConsentIDAuthenticateRequest
         * @description PATCH /linking/request-consent/{ID}/authenticate Request object
         */
        LinkingRequestConsentIDAuthenticateRequest: {
            authToken: string;
        };
        /**
         * LinkingRequestConsentIDAuthenticateState
         * @description State of PATCH linking request consent Authenticate
         * @enum {string}
         */
        LinkingRequestConsentIDAuthenticateState: 'errored' | 'consentReceivedAwaitingCredential';
        /** LinkingRequestConsentIDAuthenticateResponseError */
        LinkingRequestConsentIDAuthenticateResponseError: {
            errorInformation: components['schemas']['ErrorInformation'];
            currentState: components['schemas']['LinkingRequestConsentIDAuthenticateState'];
        };
        /**
         * ConsentStatus
         * @description Allowed values for the enumeration ConsentStatus
         *     - ISSUED - The consent has been issued by the DFSP
         *     - REVOKED - The consent has been revoked
         * @enum {string}
         */
        ConsentStatus: 'ISSUED' | 'REVOKED';
        /**
         * ConsentPostRequestPISP
         * @description The provisional Consent object sent by the DFSP in `POST /consents`.
         *
         */
        ConsentsPostRequestPISP: {
            /** @description Common ID between the PISP and the Payer DFSP for the consent object. The ID
             *     should be reused for re-sends of the same consent. A new ID should be generated
             *     for each new consent.
             *      */
            consentId: components['schemas']['CorrelationId'];
            /** @description The ID given to the original consent request on which this consent is based.
             *      */
            consentRequestId: components['schemas']['CorrelationId'];
            scopes: components['schemas']['Scope'][];
            status: components['schemas']['ConsentStatus'];
            extensionList?: components['schemas']['ExtensionList'];
        };
        /** LinkingRequestConsentIDAuthenticateResponse */
        LinkingRequestConsentIDAuthenticateResponseSuccess: {
            consent: components['schemas']['ConsentsPostRequestPISP'];
            challenge: string;
            currentState: components['schemas']['LinkingRequestConsentIDAuthenticateState'];
        };
        LinkingRequestConsentIDAuthenticateResponse: components['schemas']['LinkingRequestConsentIDAuthenticateResponseError'] | components['schemas']['LinkingRequestConsentIDAuthenticateResponseSuccess'];
        /**
         * FIDOPublicKeyCredentialAttestation
         * @description A data model representing a FIDO Attestation result. Derived from
         *     [`PublicKeyCredential` Interface](https://w3c.github.io/webauthn/#iface-pkcredential).
         *
         *     The `PublicKeyCredential` interface represents the below fields with
         *     a Type of Javascript [ArrayBuffer](https://heycam.github.io/webidl/#idl-ArrayBuffer).
         *     For this API, we represent ArrayBuffers as base64 encoded utf-8 strings.
         *
         */
        FIDOPublicKeyCredentialAttestation: {
            /** @description credential id: identifier of pair of keys, base64 encoded
             *     https://w3c.github.io/webauthn/#ref-for-dom-credential-id
             *      */
            id: string;
            /** @description raw credential id: identifier of pair of keys, base64 encoded
             *      */
            rawId?: string;
            /** @description AuthenticatorAttestationResponse
             *      */
            response: {
                /** @description JSON string with client data
                 *      */
                clientDataJSON: string;
                /** @description CBOR.encoded attestation object
                 *      */
                attestationObject: string;
            };
            /**
             * @description response type, we need only the type of public-key
             * @enum {string}
             */
            type: 'public-key';
        };
        /**
         * LinkingRequestConsentIDPassCredentialRequest
         * @description POST /linking/request-consent/{ID}/pass-credential request object
         */
        LinkingRequestConsentIDPassCredentialRequest: {
            credential: {
                payload: components['schemas']['FIDOPublicKeyCredentialAttestation'];
            };
        };
        /**
         * LinkingRequestConsentIDPassCredentialState
         * @description State of post linking request consent pass credential
         * @enum {string}
         */
        LinkingRequestConsentIDPassCredentialState: 'errored' | 'accountsLinked';
        /** LinkingRequestConsentIDPassCredentialResponseError */
        LinkingRequestConsentIDPassCredentialResponseError: {
            errorInformation: components['schemas']['ErrorInformation'];
            currentState: components['schemas']['LinkingRequestConsentIDPassCredentialState'];
        };
        /**
         * CredentialStatusVerified
         * @description The status of the Credential.
         *     - "VERIFIED" - The Credential is valid and verified.
         *
         * @enum {string}
         */
        CredentialStatusVerified: 'VERIFIED';
        /** LinkingRequestConsentIDPassCredentialResponseSuccess */
        LinkingRequestConsentIDPassCredentialResponseSuccess: {
            credential: {
                status: components['schemas']['CredentialStatusVerified'];
            };
            currentState: components['schemas']['LinkingRequestConsentIDPassCredentialState'];
        };
        LinkingRequestConsentIDPassCredentialResponse: components['schemas']['LinkingRequestConsentIDPassCredentialResponseError'] | components['schemas']['LinkingRequestConsentIDPassCredentialResponseSuccess'];
    };
    responses: {
        /** @description OK */
        200: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Bad Request */
        400: {
            headers: {
                'Content-Length': components['headers']['Content-Length'];
                'Content-Type': components['headers']['Content-Type'];
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ErrorInformationResponse'];
            };
        };
        /** @description Unauthorized */
        401: {
            headers: {
                'Content-Length': components['headers']['Content-Length'];
                'Content-Type': components['headers']['Content-Type'];
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ErrorInformationResponse'];
            };
        };
        /** @description Forbidden */
        403: {
            headers: {
                'Content-Length': components['headers']['Content-Length'];
                'Content-Type': components['headers']['Content-Type'];
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ErrorInformationResponse'];
            };
        };
        /** @description Not Found */
        404: {
            headers: {
                'Content-Length': components['headers']['Content-Length'];
                'Content-Type': components['headers']['Content-Type'];
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ErrorInformationResponse'];
            };
        };
        /** @description Method Not Allowed */
        405: {
            headers: {
                'Content-Length': components['headers']['Content-Length'];
                'Content-Type': components['headers']['Content-Type'];
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ErrorInformationResponse'];
            };
        };
        /** @description Not Acceptable */
        406: {
            headers: {
                'Content-Length': components['headers']['Content-Length'];
                'Content-Type': components['headers']['Content-Type'];
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ErrorInformationResponse'];
            };
        };
        /** @description Not Implemented */
        501: {
            headers: {
                'Content-Length': components['headers']['Content-Length'];
                'Content-Type': components['headers']['Content-Type'];
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ErrorInformationResponse'];
            };
        };
        /** @description Service Unavailable */
        503: {
            headers: {
                'Content-Length': components['headers']['Content-Length'];
                'Content-Type': components['headers']['Content-Type'];
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ErrorInformationResponse'];
            };
        };
        /** @description ThirdpartyTransaction partyLookup response */
        ThirdpartyTransactionPartyLookupResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ThirdpartyTransactionPartyLookupResponse'];
            };
        };
        /** @description ThirdpartyTransactionIDInitiate response */
        ThirdpartyTransactionIDInitiateResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ThirdpartyTransactionIDInitiateResponse'];
            };
        };
        /** @description ThirdpartyTransactionIDApproveResponse */
        ThirdpartyTransactionIDApproveResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ThirdpartyTransactionIDApproveResponse'];
            };
        };
        /** @description Response body of GET /linking/providers
         *      */
        LinkingProvidersResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['LinkingProvidersResponse'];
            };
        };
        /** @description response body of GET /accounts/{ID}
         *     derived from UpdateAccountsByUserId by Inbound Service via Pub/Sub channel
         *      */
        AccountsByUserIdResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['AccountsIDPutResponse'];
            };
        };
        /** @description Response body of POST /linking/request-consent.
         *      */
        LinkingRequestConsentResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['LinkingRequestConsentResponse'];
            };
        };
        /** @description Linking request consent authenticate response */
        LinkingRequestConsentIDAuthenticateResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['LinkingRequestConsentIDAuthenticateResponse'];
            };
        };
        /** @description Linking request consent pass credential response */
        LinkingRequestConsentIDPassCredentialResponse: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['LinkingRequestConsentIDPassCredentialResponse'];
            };
        };
    };
    parameters: {
        /** @description The identifier value. */
        ID: string;
    };
    requestBodies: never;
    headers: {
        /** @description The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.
         *
         *     **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes). */
        'Content-Length': number;
        /** @description The `Content-Type` header indicates the specific version of the API used to send the payload body. */
        'Content-Type': string;
    };
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    HealthGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components['responses']['200'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            404: components['responses']['404'];
            405: components['responses']['405'];
            406: components['responses']['406'];
            501: components['responses']['501'];
            503: components['responses']['503'];
        };
    };
    MetricsGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components['responses']['200'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            403: components['responses']['403'];
            404: components['responses']['404'];
            405: components['responses']['405'];
            406: components['responses']['406'];
            501: components['responses']['501'];
            503: components['responses']['503'];
        };
    };
    ThirdpartyTransactionPartyLookup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Thirdparty transaction party lookup body. */
        requestBody: {
            content: {
                /** @example {
                 *       "transactionRequestId": "b51ec534-ee48-4575-b6a9-ead2955b8069",
                 *       "payee": {
                 *         "partyIdType": "MSISDN",
                 *         "partyIdentifier": "16135551212"
                 *       }
                 *     } */
                'application/json': components['schemas']['ThirdpartyTransactionPartyLookupRequest'];
            };
        };
        responses: {
            200: components['responses']['ThirdpartyTransactionPartyLookupResponse'];
            default: components['responses']['400'];
        };
    };
    ThirdpartyTransactionIDInitiate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier value. */
                ID: components['parameters']['ID'];
            };
            cookie?: never;
        };
        /** @description Thirdparty transaction initiate request body. */
        requestBody: {
            content: {
                /** @example {
                 *       "payee": {
                 *         "name": "Bob bobbington",
                 *         "partyIdInfo": {
                 *           "fspId": "dfspb",
                 *           "partyIdType": "MSISDN",
                 *           "partyIdentifier": "16135551212"
                 *         }
                 *       },
                 *       "payer": {
                 *         "partyIdType": "THIRD_PARTY_LINK",
                 *         "partyIdentifier": "16135551212",
                 *         "fspId": "dfspa"
                 *       },
                 *       "amountType": "RECEIVE",
                 *       "amount": {
                 *         "currency": "USD",
                 *         "amount": "123.47"
                 *       },
                 *       "transactionType": {
                 *         "scenario": "DEPOSIT",
                 *         "initiator": "PAYER",
                 *         "initiatorType": "CONSUMER"
                 *       },
                 *       "expiration": "2021-05-24T08:38:08.699-04:00"
                 *     } */
                'application/json': components['schemas']['ThirdpartyTransactionIDInitiateRequest'];
            };
        };
        responses: {
            200: components['responses']['ThirdpartyTransactionIDInitiateResponse'];
            default: components['responses']['400'];
        };
    };
    ThirdpartyTransactionIDApprove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier value. */
                ID: components['parameters']['ID'];
            };
            cookie?: never;
        };
        /** @description Thirdparty transaction approve request body contains Authorization details */
        requestBody: {
            content: {
                /** @example {
                 *       "authorizationResponse": {
                 *         "authenticationInfo": {
                 *           "authentication": "U2F",
                 *           "authenticationValue": {
                 *             "pinValue": "xxxxxxxxxxx",
                 *             "counter": "1"
                 *           }
                 *         },
                 *         "responseType": "ENTERED"
                 *       }
                 *     } */
                'application/json': components['schemas']['ThirdpartyTransactionIDApproveRequest'];
            };
        };
        responses: {
            200: components['responses']['ThirdpartyTransactionIDApproveResponse'];
            default: components['responses']['400'];
        };
    };
    GetLinkingProviders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components['responses']['LinkingProvidersResponse'];
            default: components['responses']['400'];
        };
    };
    GetLinkingAccountsByUserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                fspId: components['schemas']['FspId'];
                userId: components['schemas']['AccountAddress'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components['responses']['AccountsByUserIdResponse'];
            default: components['responses']['400'];
        };
    };
    PostLinkingRequestConsent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Consent requests validate request details */
        requestBody: {
            content: {
                /** @example {
                 *       "consentRequestId": "f6ab43b0-71cc-49f9-b763-2ac3f05ac8c1",
                 *       "toParticipantId": "dfspa",
                 *       "accounts": [
                 *         {
                 *           "accountNickname": "SpeXXXXXXXXnt",
                 *           "id": "dfspa.username.5678",
                 *           "currency": "USD"
                 *         }
                 *       ],
                 *       "actions": [
                 *         "ACCOUNTS_TRANSFER"
                 *       ],
                 *       "userId": "username1234",
                 *       "callbackUri": "pisp-app://callback"
                 *     } */
                'application/json': components['schemas']['LinkingRequestConsentPostRequest'];
            };
        };
        responses: {
            200: components['responses']['LinkingRequestConsentResponse'];
            default: components['responses']['400'];
        };
    };
    PatchLinkingRequestConsentIDAuthenticate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ID: components['schemas']['CorrelationId'];
            };
            cookie?: never;
        };
        /** @description Linking request consent authenticate request details */
        requestBody: {
            content: {
                /** @example {
                 *       "authToken": "123456"
                 *     } */
                'application/json': components['schemas']['LinkingRequestConsentIDAuthenticateRequest'];
            };
        };
        responses: {
            200: components['responses']['LinkingRequestConsentIDAuthenticateResponse'];
            default: components['responses']['400'];
        };
    };
    PostLinkingRequestConsentIDPassCredential: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                ID: components['schemas']['CorrelationId'];
            };
            cookie?: never;
        };
        /** @description Linking request consent pass credential request details */
        requestBody: {
            content: {
                /** @example {
                 *       "credential": {
                 *         "credentialType": "FIDO",
                 *         "status": "PENDING",
                 *         "payload": {
                 *           "id": "HskU2gw4np09IUtYNHnxMM696jJHqvccUdBmd0xP6XEWwH0xLei1PUzDJCM19SZ3A2Ex0fNLw0nc2hrIlFnAtw",
                 *           "rawId": "HskU2gw4np09IUtYNHnxMM696jJHqvccUdBmd0xP6XEWwH0xLei1PUzDJCM19SZ3A2Ex0fNLw0nc2hrIlFnAtw==",
                 *           "response": {
                 *             "clientDataJSON": "eyJ0eXBlIjoid2ViYXV0aG4uY3JlYXRlIiwiY2hhbGxlbmdlIjoiWXpSaFpHRmlZak16WlRrek1EWmlNRE00TURnNE1UTXlZV1ptWTJSbE5UVTJZelV3WkRneVpqWXdNMlkwTnpjeE1XRTVOVEV3WW1ZelltVmxaalprTmciLCJvcmlnaW4iOiJodHRwOi8vbG9jYWxob3N0OjQyMTgxIiwiY3Jvc3NPcmlnaW4iOmZhbHNlfQ==",
                 *             "attestationObject": "o2NmbXRmcGFja2VkZ2F0dFN0bXSjY2FsZyZjc2lnWEcwRQIhAN2JDPPTse/45EHSqSpEJiiok5sns+HqdJch3+gsL09VAiAh7W7ZhQC8gMIkgwcA+S4rQkaHoHnP9AkkohaKCuuA62N4NWOBWQLBMIICvTCCAaWgAwIBAgIECwXNUzANBgkqhkiG9w0BAQsFADAuMSwwKgYDVQQDEyNZdWJpY28gVTJGIFJvb3QgQ0EgU2VyaWFsIDQ1NzIwMDYzMTAgFw0xNDA4MDEwMDAwMDBaGA8yMDUwMDkwNDAwMDAwMFowbjELMAkGA1UEBhMCU0UxEjAQBgNVBAoMCVl1YmljbyBBQjEiMCAGA1UECwwZQXV0aGVudGljYXRvciBBdHRlc3RhdGlvbjEnMCUGA1UEAwweWXViaWNvIFUyRiBFRSBTZXJpYWwgMTg0OTI5NjE5MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEIRpvsbWJJcsKwRhffCrjqLSIEBR5sR7/9VXgfZdRvSsXaiUt7lns44WZIFuz6ii/j9f8fadcBUJyrkhY5ZH8WqNsMGowIgYJKwYBBAGCxAoCBBUxLjMuNi4xLjQuMS40MTQ4Mi4xLjEwEwYLKwYBBAGC5RwCAQEEBAMCBDAwIQYLKwYBBAGC5RwBAQQEEgQQFJogIY72QTOWuIH41bfx9TAMBgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4IBAQA+/qPfPSrgclePfgTQ3VpLaNsBr+hjLhi04LhzQxiRGWwYS+vB1TOiPXeLsQQIwbmqQU51doVbCTaXGLNIr1zvbLAwhnLWH7i9m4ahCqaCzowtTvCQ7VBUGP5T1M4eYnoo83IDCVjQj/pZG8QYgOGOigztGoWAf5CWcUF6C0UyFbONwUcqJEl2QLToa/7E8VRjm4W46IAUljYkODVZASv8h3wLROx9p5TSBlSymtwdulxQe/DKbfNSvM3edA0up+EIJKLOOU+QTR2ZQV46fEW1/ih6m8vcaY6L3NW0eYpc7TXeijUJAgoUtya/vzmnRAecuY9bncoJt8PrvL2ir2kDaGF1dGhEYXRhWMRJlg3liA6MaHQ0Fw9kdmBbj+SuuaKGMseZXPO6gx2XY0EAAAAEFJogIY72QTOWuIH41bfx9QBAHskU2gw4np09IUtYNHnxMM696jJHqvccUdBmd0xP6XEWwH0xLei1PUzDJCM19SZ3A2Ex0fNLw0nc2hrIlFnAt6UBAgMmIAEhWCBYz+SV6fSy7ZjFzdj+SWxaMbfaw4ZT+wYgClN3v93kVSJYIGSzY41DNLrh1jXp4J53qCnq4+b9HYXud/0UEsZquDeV"
                 *           },
                 *           "type": "public-key"
                 *         }
                 *       }
                 *     } */
                'application/json': components['schemas']['LinkingRequestConsentIDPassCredentialRequest'];
            };
        };
        responses: {
            200: components['responses']['LinkingRequestConsentIDPassCredentialResponse'];
            default: components['responses']['400'];
        };
    };
}
